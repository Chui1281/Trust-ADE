"""
–í–≤–æ–¥/–≤—ã–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
import os
import json
import pandas as pd
import numpy as np
from datetime import datetime
from config.settings import project_root


def convert_numpy_types(obj):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç numpy —Ç–∏–ø—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Python —Ç–∏–ø—ã"""
    if isinstance(obj, np.integer):
        return int(obj)
    elif isinstance(obj, np.floating):
        return float(obj)
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    elif isinstance(obj, dict):
        return {key: convert_numpy_types(value) for key, value in obj.items()}
    elif isinstance(obj, list):
        return [convert_numpy_types(item) for item in obj]
    elif isinstance(obj, tuple):
        return tuple(convert_numpy_types(item) for item in obj)
    else:
        return obj


def save_results_and_visualizations(all_results):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""

    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_dir = os.path.join(project_root, 'results')
    os.makedirs(results_dir, exist_ok=True)
    print(f"  üìÅ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_dir}")

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    detailed_results = []

    for dataset_name, dataset_results in all_results.items():
        for model_name, model_info in dataset_results['models'].items():
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            trust_results = model_info.get('trust_results', {})
            detailed_row = {
                'Dataset': dataset_name,
                'Model': model_name,
                'Accuracy': float(model_info.get('accuracy', 0.0)),
                'Training_Time': float(model_info.get('training_time', 0.0)),
                'Trust_Score': float(trust_results.get('trust_score', 0.0)),
                'Trust_Level': trust_results.get('trust_level', 'Unknown'),
                'Explainability': float(trust_results.get('explainability_score', 0.0)),
                'Robustness': float(trust_results.get('robustness_index', 0.0)),
                'Bias_Shift': float(trust_results.get('bias_shift_index', 0.0)),
                'Concept_Drift': float(trust_results.get('concept_drift_rate', 0.0)),
                'CUDA': bool(model_info.get('use_cuda', False)),
                'Color': model_info.get('color', '#808080'),
                'Description': model_info.get('description', 'Unknown')
            }
            detailed_results.append(detailed_row)

    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
    df_detailed = pd.DataFrame(detailed_results)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–æ–≤
    detailed_path = f'{results_dir}/detailed_comparison_cuda_{timestamp}.csv'
    df_detailed.to_csv(detailed_path, index=False, encoding='utf-8-sig')
    print(f"  ‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {os.path.basename(detailed_path)}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    print(f"  üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    try:
        from visualization.charts import create_fixed_visualizations
        create_fixed_visualizations(df_detailed, results_dir, timestamp)
        print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω–æ 4+ —Ç–∏–ø–æ–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å CUDA –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π")
    except Exception as viz_error:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(viz_error)}")

    print(f"  ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_dir}")
    return results_dir

