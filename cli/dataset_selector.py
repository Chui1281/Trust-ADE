"""
CLI –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
"""
import argparse

def create_dataset_selector():
    """–°–æ–∑–¥–∞–Ω–∏–µ CLI –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
    
    parser = argparse.ArgumentParser(
        description='üî¨ Trust-ADE ML Models Comparison',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ó–∞–ø—É—Å–∫ –Ω–∞ –≤—Å–µ—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö
  python main.py

  # –¢–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
  python main.py --datasets iris breast_cancer

  # –í—Å–µ –∫—Ä–æ–º–µ –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
  python main.py --exclude digits_binary

  # –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  python main.py --datasets iris wine --quick

  # –¢–æ–ª—å–∫–æ CUDA –º–æ–¥–µ–ª–∏
  python main.py --cuda-only

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã:
  iris           : –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Ä–∏—Å–æ–≤ (3 –∫–ª–∞—Å—Å–∞, 4 –ø—Ä–∏–∑–Ω–∞–∫–∞)
  breast_cancer  : –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–∫–∞ –º–æ–ª–æ—á–Ω–æ–π –∂–µ–ª–µ–∑—ã (2 –∫–ª–∞—Å—Å–∞, 30 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
  wine          : –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∏–Ω (3 –∫–ª–∞—Å—Å–∞, 13 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
  digits_binary : –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä—ã 0 (2 –∫–ª–∞—Å—Å–∞, 64 –ø–∏–∫—Å–µ–ª—è)
        """
    )
    
    # –í—ã–±–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
    parser.add_argument(
        '--datasets', '-d',
        nargs='+',
        choices=['iris', 'breast_cancer', 'wine', 'digits_binary'],
        help='–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤'
    )
    
    parser.add_argument(
        '--exclude', '-e',
        nargs='+',
        choices=['iris', 'breast_cancer', 'wine', 'digits_binary'],
        help='–ò—Å–∫–ª—é—á–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç—ã'
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    parser.add_argument(
        '--cuda-only',
        action='store_true',
        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ CUDA –º–æ–¥–µ–ª–∏'
    )
    
    parser.add_argument(
        '--no-cuda',
        action='store_true',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å CUDA –º–æ–¥–µ–ª–∏'
    )
    
    parser.add_argument(
        '--quick',
        action='store_true',
        help='–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (–º–µ–Ω—å—à–µ —ç–ø–æ—Ö, —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    return parser

def get_selected_datasets(args):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
    
    all_datasets = ['iris', 'breast_cancer', 'wine', 'digits_binary']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
    if args.datasets:
        selected = args.datasets
    else:
        selected = all_datasets.copy()
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
    if args.exclude:
        selected = [d for d in selected if d not in args.exclude]
    
    return selected

