"""
Enhanced SHAP Explainer —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—ã–≤–æ–¥–∞
"""

import numpy as np
import warnings
from typing import Union, Optional, Any


class SHAPExplainer:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è SHAP –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    """

    def __init__(self, model, training_data=None, explainer_type='auto'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SHAP explainer
        """
        self.model = model
        self.training_data = training_data
        self.explainer_type = explainer_type
        self.explainer = self._create_explainer()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.n_features = self._get_n_features()

        # –ö—ç—à –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        self._explanation_cache = {}

    def _get_n_features(self) -> int:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
            if hasattr(self.model, 'n_features_'):
                return self.model.n_features_
            elif hasattr(self.model, 'n_features_in_'):
                return self.model.n_features_in_
            elif self.training_data is not None:
                return self.training_data.shape[1] if hasattr(self.training_data, 'shape') else len(self.training_data)
            else:
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π resort - –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ coef_ –∏–ª–∏ feature_importances_
                if hasattr(self.model, 'coef_'):
                    model_obj = self.model.model if hasattr(self.model, 'model') else self.model
                    return len(model_obj.coef_) if len(model_obj.coef_.shape) > 1 else len(model_obj.coef_)
                elif hasattr(self.model, 'feature_importances_'):
                    model_obj = self.model.model if hasattr(self.model, 'model') else self.model
                    return len(model_obj.feature_importances_)
                else:
                    return 10  # Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
        except Exception:
            return 10  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback

    def _create_explainer(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ SHAP explainer —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            import shap

            # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–µ—Ä—Ç–∫–∞
            model_obj = self.model.model if hasattr(self.model, 'model') else self.model

            # Tree-based –º–æ–¥–µ–ª–∏
            if (self.explainer_type == 'tree' or
                self._is_tree_model(model_obj)):

                print("üå≥ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TreeExplainer")
                return shap.TreeExplainer(model_obj)

            # Linear –º–æ–¥–µ–ª–∏
            elif self._is_linear_model(model_obj):
                print("üìè –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LinearExplainer")
                return shap.LinearExplainer(model_obj, self._get_background_data())

            # Kernel explainer –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            else:
                print("üîÆ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è KernelExplainer")
                background = self._get_background_data()
                return shap.KernelExplainer(self._get_predict_function(), background)

        except ImportError:
            warnings.warn("SHAP –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback explainer.")
            return FallbackExplainer(self.model, self.n_features)
        except Exception as e:
            warnings.warn(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SHAP explainer: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback.")
            return FallbackExplainer(self.model, self.n_features)

    def _is_tree_model(self, model) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –¥–µ—Ä–µ–≤–æ–º"""
        tree_indicators = [
            'tree_', 'estimators_', 'RandomForest', 'GradientBoosting',
            'XGBoost', 'LightGBM', 'CatBoost'
        ]
        model_str = str(type(model).__name__)
        return any(indicator in str(model.__class__) or indicator in model_str
                  for indicator in tree_indicators)

    def _is_linear_model(self, model) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –ª–∏–Ω–µ–π–Ω–æ–π"""
        linear_indicators = [
            'LinearRegression', 'LogisticRegression', 'Ridge', 'Lasso',
            'ElasticNet', 'SGD', 'coef_'
        ]
        return (any(indicator in str(model.__class__) for indicator in linear_indicators) or
                hasattr(model, 'coef_'))

    def _get_background_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SHAP"""
        try:
            if self.training_data is not None:
                import shap
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                sample_size = min(100, len(self.training_data))
                return shap.sample(self.training_data, sample_size)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω—É–ª–µ–≤–æ–π background
                return np.zeros((1, self.n_features))
        except Exception:
            return np.zeros((1, self.n_features))

    def _get_predict_function(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        if hasattr(self.model, 'predict_proba'):
            return self.model.predict_proba
        elif hasattr(self.model, 'predict'):
            return self.model.predict
        else:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            def dummy_predict(X):
                return np.random.random((len(X), 2))
            return dummy_predict

    def explain(self, X: np.ndarray, class_idx: int = 1, max_evals: int = 100) -> np.ndarray:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ SHAP

        Args:
            X: –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            class_idx: –∏–Ω–¥–µ–∫—Å –∫–ª–∞—Å—Å–∞ –¥–ª—è –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤—ã—Ö –∑–∞–¥–∞—á
            max_evals: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è KernelExplainer

        Returns:
            numpy.ndarray: –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã (n_samples, n_features)
        """
        try:
            X = np.array(X)
            if len(X.shape) == 1:
                X = X.reshape(1, -1)

            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            cache_key = f"{X.shape}_{class_idx}_{max_evals}"
            if cache_key in self._explanation_cache:
                return self._explanation_cache[cache_key]

            # –ü–æ–ª—É—á–∞–µ–º SHAP –∑–Ω–∞—á–µ–Ω–∏—è
            shap_values = self._get_shap_values(X, max_evals)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã—Ö–æ–¥–æ–≤
            processed_explanations = self._process_shap_output(shap_values, class_idx)

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if len(self._explanation_cache) < 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                self._explanation_cache[cache_key] = processed_explanations

            return processed_explanations

        except Exception as e:
            warnings.warn(f"–û—à–∏–±–∫–∞ –≤ SHAP explain: {str(e)}")
            return self._generate_fallback_explanations(X)

    def _get_shap_values(self, X: np.ndarray, max_evals: int) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ SHAP –∑–Ω–∞—á–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ explainer'–æ–≤"""
        try:
            import shap

            if isinstance(self.explainer, shap.KernelExplainer):
                return self.explainer.shap_values(X, nsamples=max_evals, silent=True)
            elif isinstance(self.explainer, shap.LinearExplainer):
                return self.explainer.shap_values(X)
            elif hasattr(self.explainer, 'shap_values'):
                return self.explainer.shap_values(X)
            else:
                # FallbackExplainer
                return self.explainer.explain(X)

        except Exception as e:
            warnings.warn(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SHAP values: {str(e)}")
            return self.explainer.explain(X)

    def _process_shap_output(self, shap_values: Any, class_idx: int) -> np.ndarray:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—ã—Ö–æ–¥–∞ SHAP

        –í–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        1. numpy.ndarray (n_samples, n_features) - –±–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        2. list/tuple of arrays - –º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        3. Explanation object - –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ SHAP
        """
        try:
            # –°–ª—É—á–∞–π 1: –û–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤ numpy
            if isinstance(shap_values, np.ndarray):
                if len(shap_values.shape) == 2:
                    return shap_values
                elif len(shap_values.shape) == 3:
                    # 3D –º–∞—Å—Å–∏–≤ - –±–µ—Ä–µ–º –Ω—É–∂–Ω—ã–π –∫–ª–∞—Å—Å
                    return shap_values[:, :, class_idx] if shap_values.shape[2] > class_idx else shap_values[:, :, 0]

            # –°–ª—É—á–∞–π 2: –°–ø–∏—Å–æ–∫ –∏–ª–∏ –∫–æ—Ä—Ç–µ–∂ –º–∞—Å—Å–∏–≤–æ–≤ (–º–Ω–æ–≥–æ–∫–ª–∞—Å—Å–æ–≤–∞—è –∑–∞–¥–∞—á–∞)
            elif isinstance(shap_values, (list, tuple)):
                if len(shap_values) > class_idx:
                    selected_values = shap_values[class_idx]
                else:
                    selected_values = shap_values  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Å

                return np.array(selected_values) if not isinstance(selected_values, np.ndarray) else selected_values

            # –°–ª—É—á–∞–π 3: SHAP Explanation object
            elif hasattr(shap_values, 'values'):
                values = shap_values.values
                if isinstance(values, np.ndarray):
                    if len(values.shape) == 3 and values.shape[2] > class_idx:
                        return values[:, :, class_idx]
                    elif len(values.shape) == 2:
                        return values
                    else:
                        return values[:, :, 0] if len(values.shape) == 3 else values
                else:
                    return np.array(values)

            # –°–ª—É—á–∞–π 4: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            else:
                warnings.warn(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SHAP output: {type(shap_values)}")
                return np.array(shap_values) if hasattr(shap_values, '__array__') else self._generate_fallback_explanations(None)

        except Exception as e:
            warnings.warn(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SHAP output: {str(e)}")
            return self._generate_fallback_explanations(None)

    def _generate_fallback_explanations(self, X: Optional[np.ndarray]) -> np.ndarray:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        if X is not None:
            n_samples = len(X)
            n_features = X.shape[1]
        else:
            n_samples = 1
            n_features = self.n_features

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º–æ–π
        return np.random.normal(0, 0.1, size=(n_samples, n_features))

    def shap_values(self, X: np.ndarray, **kwargs) -> Union[np.ndarray, list]:
        """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ shap_values –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å SHAP API"""
        max_evals = kwargs.get('max_evals', kwargs.get('nsamples', 100))
        return self._get_shap_values(X, max_evals)

    def __call__(self, X: np.ndarray, **kwargs) -> np.ndarray:
        """–î–µ–ª–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤—ã–∑—ã–≤–∞–µ–º—ã–º"""
        return self.explain(X, **kwargs)


class FallbackExplainer:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π Fallback explainer
    """

    def __init__(self, model, n_features: int):
        self.model = model
        self.n_features = n_features
        self.feature_importance = self._get_feature_importance()

    def _get_feature_importance(self) -> np.ndarray:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            model_obj = self.model.model if hasattr(self.model, 'model') else self.model

            # 1. feature_importances_ (–¥–µ—Ä–µ–≤—å—è, –∞–Ω—Å–∞–º–±–ª–∏)
            if hasattr(model_obj, 'feature_importances_'):
                importance = model_obj.feature_importances_
                if len(importance) == self.n_features:
                    return importance

            # 2. coef_ (–ª–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏)
            if hasattr(model_obj, 'coef_'):
                coef = model_obj.coef_
                if len(coef.shape) > 1:
                    importance = np.abs(coef[0])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Å
                else:
                    importance = np.abs(coef)

                if len(importance) == self.n_features:
                    return importance / np.sum(importance)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º

            # 3. –ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ –æ–±–µ—Ä—Ç–∫—É –º–æ–¥–µ–ª–∏
            if hasattr(self.model, 'get_feature_importance'):
                try:
                    importance = self.model.get_feature_importance()
                    if importance is not None and len(importance) == self.n_features:
                        return importance
                except:
                    pass

            # 4. Fallback - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –≤–µ—Å–∞
            return np.ones(self.n_features) / self.n_features

        except Exception:
            return np.ones(self.n_features) / self.n_features

    def explain(self, X: np.ndarray) -> np.ndarray:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""
        try:
            X = np.array(X)
            if len(X.shape) == 1:
                X = X.reshape(1, -1)

            n_samples = X.shape[0]
            n_features = min(X.shape[1], len(self.feature_importance))

            explanations = np.zeros((n_samples, n_features))

            for i in range(n_samples):
                # –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç—å —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —à—É–º–∞
                explanation = X[i, :n_features] * self.feature_importance[:n_features]
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                noise = np.random.normal(0, 0.01, size=explanation.shape)
                explanations[i] = explanation + noise

            return explanations

        except Exception as e:
            warnings.warn(f"–û—à–∏–±–∫–∞ –≤ fallback explainer: {str(e)}")
            n_samples = len(X) if X is not None else 1
            return np.random.normal(0, 0.05, size=(n_samples, self.n_features))

    def shap_values(self, X: np.ndarray) -> np.ndarray:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å SHAP API"""
        return self.explain(X)
