"""
–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º XANFIS
"""
import time
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

from config.settings import CUDA_AVAILABLE, DEVICE, XANFIS_AVAILABLE
from models.wrappers import SklearnWrapper, CUDAMLPWrapper, FixedXANFISWrapper
from models.cuda_models import OptimizedCUDAMLPClassifier

# –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ XANFIS –∏–∑ –ø–∞–ø–∫–∏ models
if XANFIS_AVAILABLE:
    try:
        from models.xanfis_wrapper import (
            TrustAdeCompatibleXANFIS,
            TrustAdeXANFISWrapper,
            train_improved_xanfis_model
        )
        ENHANCED_XANFIS_AVAILABLE = True
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π XANFIS –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ models/")
    except ImportError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π XANFIS: {e}")
        ENHANCED_XANFIS_AVAILABLE = False
else:
    ENHANCED_XANFIS_AVAILABLE = False


def train_fixed_xanfis_model(X_train, X_test, y_train, y_test, dataset_name, dataset_type):
    """–û–±—É—á–µ–Ω–∏–µ XANFIS —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ wrapper –∏–∑ models/"""

    if not XANFIS_AVAILABLE:
        return None, None, 0.0, 0.0

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if ENHANCED_XANFIS_AVAILABLE:
        print(f"    üß† –û–±—É—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ XANFIS –Ω–∞ {dataset_name}...")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–º–µ–Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_names = [f"feature_{i}" for i in range(X_train.shape[1])]

        # –í—ã–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è
        wrapped_xanfis, scaler, accuracy, training_time = train_improved_xanfis_model(
            X_train, X_test, y_train, y_test, dataset_name, feature_names,dataset_type
        )

        if wrapped_xanfis and accuracy > 0.1:
            print(f"      ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π XANFIS –æ–±—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"      üìä –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.3f}")
            print(f"      ‚è±Ô∏è –í—Ä–µ–º—è: {training_time:.2f}s")
            print(f"      üß† –ü—Ä–∞–≤–∏–ª: {len(wrapped_xanfis.get_fuzzy_rules())}")
            return wrapped_xanfis, scaler, accuracy, training_time

def train_models(X_train, X_test, y_train, y_test, feature_names, models_config, dataset_type, dataset_name):
    """–û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –≤–∫–ª—é—á–∞—è —É–ª—É—á—à–µ–Ω–Ω—ã–π XANFIS –∏ CUDA"""

    trained_models = {}
    n_samples = len(X_train)

    # –û–±—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö sklearn –º–æ–¥–µ–ª–µ–π
    for model_name, config in models_config.items():
        print(f"  üìà –û–±—É—á–µ–Ω–∏–µ {model_name}...")

        try:
            start_time = time.time()

            # –û–±—ã—á–Ω—ã–µ sklearn –º–æ–¥–µ–ª–∏
            model = config['sklearn_class'](**config['params'])

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if config['needs_scaling']:
                scaler = StandardScaler()
                X_train_scaled = scaler.fit_transform(X_train)
                X_test_scaled = scaler.transform(X_test)
            else:
                scaler = None
                X_train_scaled, X_test_scaled = X_train, X_test

            # –û–±—É—á–µ–Ω–∏–µ
            model.fit(X_train_scaled, y_train)
            training_time = time.time() - start_time

            # –û—Ü–µ–Ω–∫–∞
            y_pred = model.predict(X_test_scaled)
            accuracy = accuracy_score(y_test, y_pred)

            # –û–±–µ—Ä—Ç–∫–∞
            wrapped_model = SklearnWrapper(model, feature_names)

            print(f"    ‚úÖ {model_name} –æ–±—É—á–µ–Ω –∑–∞ {training_time:.2f} —Å–µ–∫, —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.3f}")

            trained_models[model_name] = {
                'wrapped_model': wrapped_model,
                'scaler': scaler,
                'training_time': training_time,
                'accuracy': accuracy,
                'needs_scaling': config['needs_scaling'],
                'description': config['description'],
                'color': config['color'],
                'use_cuda': config.get('use_cuda', False),
                'model_type': 'sklearn'
            }

        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {model_name}: {str(e)}")
            continue

    # CUDA –º–æ–¥–µ–ª—å
    if CUDA_AVAILABLE:
        cuda_model_name = 'MLP Neural Network (CUDA)'
        print(f"  üìà –û–±—É—á–µ–Ω–∏–µ {cuda_model_name}...")

        try:
            start_time = time.time()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è CUDA MLP
            n_classes = len(np.unique(y_train))

            model = OptimizedCUDAMLPClassifier(
                hidden_layers=(128, 64),
                n_classes=n_classes,
                learning_rate=0.001,
                epochs=200,
                device=DEVICE,
                random_state=42,
                dataset_size=n_samples
            )

            # –û–±—É—á–µ–Ω–∏–µ
            model.fit(X_train, y_train)
            training_time = time.time() - start_time

            # –û—Ü–µ–Ω–∫–∞
            y_pred = model.predict(X_test)
            accuracy = accuracy_score(y_test, y_pred)

            # –û–±–µ—Ä—Ç–∫–∞
            wrapped_model = CUDAMLPWrapper(model, feature_names)

            cuda_used = "üöÄ" if model.use_cuda else "üì±"
            print(f"    ‚úÖ {cuda_model_name} –æ–±—É—á–µ–Ω –∑–∞ {training_time:.2f} —Å–µ–∫, —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.3f}")
            print(f"    {cuda_used} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å {'CUDA' if model.use_cuda else 'CPU'} —É—Å–∫–æ—Ä–µ–Ω–∏–µ")

            trained_models[cuda_model_name] = {
                'wrapped_model': wrapped_model,
                'scaler': None,
                'training_time': training_time,
                'accuracy': accuracy,
                'needs_scaling': False,
                'description': f'–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π –ø–µ—Ä—Å–µ–ø—Ç—Ä–æ–Ω ({"CUDA" if model.use_cuda else "CPU –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π"})',
                'color': '#8A2BE2',
                'use_cuda': model.use_cuda,
                'model_type': 'cuda'
            }

        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {cuda_model_name}: {str(e)}")

    return trained_models


def run_comparison(selected_datasets=None, cuda_only=False, no_cuda=False, quick_mode=False, verbose=False):
    """–ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º XANFIS"""

    print("=" * 100)
    print("üî¨ –ü–†–û–î–í–ò–ù–£–¢–û–ï –°–†–ê–í–ù–ï–ù–ò–ï ML –ú–û–î–ï–õ–ï–ô –° TRUST-ADE + –£–õ–£–ß–®–ï–ù–ù–´–ô XANFIS")
    print("üöÄ –í–∫–ª—é—á–∞–µ—Ç GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π XANFIS –∏–∑ models/")
    print("=" * 100)

    # –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    from cli.dataset_selector import get_selected_datasets
    from data.datasets import prepare_datasets, create_models_config
    from evaluation.trust_evaluator import enhanced_trust_ade_evaluation
    from analysis.results import print_dataset_summary, print_final_analysis
    from utils.io_utils import save_results_and_visualizations

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    all_datasets = prepare_datasets()
    models_config = create_models_config()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ
    if selected_datasets:
        datasets = {name: info for name, info in all_datasets.items()
                   if name in selected_datasets}
        print(f"üìä –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã: {', '.join(selected_datasets)}")
    else:
        datasets = all_datasets
        print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã: {', '.join(datasets.keys())}")

    # –°—Ç–∞—Ç—É—Å XANFIS
    if ENHANCED_XANFIS_AVAILABLE:
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π XANFIS –∞–∫—Ç–∏–≤–µ–Ω –∏–∑ models/improved_xanfis.py")
        print("   üß† –û–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å: –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∞–≤–∏–ª")
        print("   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    elif XANFIS_AVAILABLE:
        print("‚ö†Ô∏è –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π XANFIS (fallback)")
    else:
        print("‚ùå XANFIS –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    all_results = {}

    for dataset_name, dataset_info in datasets.items():
        print(f"\n{'=' * 80}")
        print(f"üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –î–ê–¢–ê–°–ï–¢–ï: {dataset_name.upper()}")
        print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {dataset_info['description']}")
        print(f"üè∑Ô∏è –î–æ–º–µ–Ω: {dataset_info['domain']}")
        print(f"üéØ –¢–∏–ø –∑–∞–¥–∞—á–∏: {dataset_info['type']}")
        print("=" * 80)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        X, y = dataset_info['X'], dataset_info['y']
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {X.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤, {X.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"üìä –ö–ª–∞—Å—Å—ã: {np.bincount(y)} (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(np.unique(y))})")

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.3, random_state=42, stratify=y
        )
        print(f"üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {len(X_train)} –æ–±—É—á–µ–Ω–∏–µ / {len(X_test)} —Ç–µ—Å—Ç")

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        print(f"\nü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
        trained_models = train_models(
            X_train, X_test, y_train, y_test,
            dataset_info['feature_names'], models_config,
            dataset_info['type'], dataset_name
        )

        # –û–±—É—á–µ–Ω–∏–µ XANFIS —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
        if XANFIS_AVAILABLE and not cuda_only:
            wrapped_xanfis, xanfis_scaler, xanfis_accuracy, xanfis_time = train_fixed_xanfis_model(
                X_train, X_test, y_train, y_test, dataset_name, dataset_info['type']
            )

            if wrapped_xanfis and xanfis_accuracy > 0.1:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø XANFIS –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
                xanfis_description = ('Trust-ADE Compatible XANFIS (—É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å)'
                                    if ENHANCED_XANFIS_AVAILABLE
                                    else 'Adaptive Neuro-Fuzzy Inference System (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)')

                trained_models['XANFIS'] = {
                    'wrapped_model': wrapped_xanfis,
                    'scaler': xanfis_scaler,
                    'training_time': xanfis_time,
                    'accuracy': xanfis_accuracy,
                    'needs_scaling': True,
                    'description': xanfis_description,
                    'color': '#9932CC',
                    'use_cuda': False,
                    'model_type': 'enhanced_xanfis' if ENHANCED_XANFIS_AVAILABLE else 'legacy_xanfis',
                    'explainability': 'high' if ENHANCED_XANFIS_AVAILABLE else 'medium'
                }

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ XANFIS
                if ENHANCED_XANFIS_AVAILABLE and hasattr(wrapped_xanfis, 'get_fuzzy_rules'):
                    try:
                        rules_count = len(wrapped_xanfis.get_fuzzy_rules())
                        trained_models['XANFIS']['rules_count'] = rules_count
                        print(f"    üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {rules_count}")
                    except Exception:
                        pass

        # Trust-ADE –æ—Ü–µ–Ω–∫–∞
        enhanced_trust_ade_evaluation(trained_models, X_test, y_test, dataset_info['domain'], X_train)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        all_results[dataset_name] = {
            'dataset_info': dataset_info,
            'models': trained_models,
            'X_test_shape': X_test.shape,
            'y_test_shape': y_test.shape
        }

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print_dataset_summary(dataset_name, trained_models)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    print_final_analysis(all_results)
    results_dir = save_results_and_visualizations(all_results)

    print(f"\nüéâ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_dir}")
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ:")
    print(f"  ‚Ä¢ CSV —Ñ–∞–π–ª—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏ –∫—Ä–∞—Ç–∫–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
    print(f"  ‚Ä¢ JSON —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print(f"  ‚Ä¢ 4+ —Ç–∏–ø–æ–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å CUDA –∏ XANFIS –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π")

    if ENHANCED_XANFIS_AVAILABLE:
        print(f"  üß† –£–ª—É—á—à–µ–Ω–Ω—ã–π XANFIS —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å—é")

    print(f"  üöÄ CUDA —É—Å–∫–æ—Ä–µ–Ω–∏–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –º–æ–¥–µ–ª–µ–π")

    return all_results, results_dir

