"""
–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
"""
import numpy as np
from sklearn.datasets import load_iris, load_breast_cancer, load_wine, load_digits


def prepare_datasets():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""

    datasets = {}

    print("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")

    # 1. Iris Dataset
    print("  üå∏ –ó–∞–≥—Ä—É–∂–∞–µ–º Iris Dataset...")
    iris = load_iris()
    datasets['iris'] = {
        'X': iris.data,
        'y': iris.target,
        'feature_names': list(iris.feature_names),
        'target_names': list(iris.target_names),
        'description': '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Ä–∏—Å–æ–≤ (3 –∫–ª–∞—Å—Å–∞, 4 –ø—Ä–∏–∑–Ω–∞–∫–∞)',
        'domain': 'general',
        'type': 'multiclass'
    }

    # 2. Breast Cancer Dataset
    print("  üè• –ó–∞–≥—Ä—É–∂–∞–µ–º Breast Cancer Dataset...")
    cancer = load_breast_cancer()
    datasets['breast_cancer'] = {
        'X': cancer.data,
        'y': cancer.target,
        'feature_names': list(cancer.feature_names),
        'target_names': list(cancer.target_names),
        'description': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–∫–∞ –º–æ–ª–æ—á–Ω–æ–π –∂–µ–ª–µ–∑—ã (2 –∫–ª–∞—Å—Å–∞, 30 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)',
        'domain': 'medical',
        'type': 'binary'
    }

    # 3. Wine Dataset
    print("  üç∑ –ó–∞–≥—Ä—É–∂–∞–µ–º Wine Dataset...")
    wine = load_wine()
    datasets['wine'] = {
        'X': wine.data,
        'y': wine.target,
        'feature_names': list(wine.feature_names),
        'target_names': list(wine.target_names),
        'description': '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∏–Ω (3 –∫–ª–∞—Å—Å–∞, 13 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)',
        'domain': 'general',
        'type': 'multiclass'
    }

    # 4. Digits Dataset (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–ª—è –ª—É—á—à–∏—Ö –º–µ—Ç—Ä–∏–∫ Trust-ADE)
    print("  üî¢ –ó–∞–≥—Ä—É–∂–∞–µ–º Digits Dataset (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
    digits = load_digits()
    # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª—É—á—à–∏—Ö –º–µ—Ç—Ä–∏–∫ Trust-ADE
    X_digits = digits.data[:1500]
    y_digits = (digits.target[:1500] == 0).astype(int)

    datasets['digits_binary'] = {
        'X': X_digits,
        'y': y_digits,
        'feature_names': [f"pixel_{i}" for i in range(X_digits.shape[1])],
        'target_names': ['not_zero', 'zero'],
        'description': '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ü–∏—Ñ—Ä—ã 0 (2 –∫–ª–∞—Å—Å–∞, 64 –ø–∏–∫—Å–µ–ª—è)',
        'domain': 'general',
        'type': 'binary'
    }

    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(datasets)} –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
    return datasets


def create_models_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
    from sklearn.neural_network import MLPClassifier
    from sklearn.svm import SVC

    models_config = {
        'Random Forest': {
            'sklearn_class': RandomForestClassifier,
            'params': {
                'n_estimators': 200,
                'max_depth': 15,
                'min_samples_split': 3,
                'min_samples_leaf': 1,
                'max_features': 'sqrt',
                'random_state': 42,
                'n_jobs': -1
            },
            'needs_scaling': False,
            'description': '–ê–Ω—Å–∞–º–±–ª—å —Ä–µ—à–∞—é—â–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤',
            'color': '#2E8B57',
            'use_cuda': False
        },

        'MLP Neural Network (CPU)': {
            'sklearn_class': MLPClassifier,
            'params': {
                'hidden_layer_sizes': (150, 100, 50),
                'activation': 'relu',
                'solver': 'adam',
                'alpha': 0.0001,
                'learning_rate': 'adaptive',
                'max_iter': 1000,
                'random_state': 42,
                'early_stopping': True,
                'validation_fraction': 0.15
            },
            'needs_scaling': True,
            'description': '–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–π –ø–µ—Ä—Å–µ–ø—Ç—Ä–æ–Ω (CPU)',
            'color': '#4169E1',
            'use_cuda': False
        },

        'Support Vector Machine': {
            'sklearn_class': SVC,
            'params': {
                'kernel': 'rbf',
                'C': 2.0,
                'gamma': 'scale',
                'probability': True,
                'random_state': 42
            },
            'needs_scaling': True,
            'description': '–ú–µ—Ç–æ–¥ –æ–ø–æ—Ä–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤',
            'color': '#DC143C',
            'use_cuda': False
        },

        'Gradient Boosting': {
            'sklearn_class': GradientBoostingClassifier,
            'params': {
                'n_estimators': 150,
                'learning_rate': 0.15,
                'max_depth': 4,
                'min_samples_split': 3,
                'subsample': 0.9,
                'random_state': 42
            },
            'needs_scaling': False,
            'description': '–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥',
            'color': '#FF8C00',
            'use_cuda': False
        }
    }

    return models_config

