#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
–ü–û–õ–ù–û–ï —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π —Å Trust-ADE Protocol + CUDA + –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã: XANFIS, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è numpy, –Ω—É–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ Trust-ADE, CUDA –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
üéØ –í–∫–ª—é—á–∞–µ—Ç: –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
"""

import numpy as np
from sklearn.model_selection import train_test_split

from cli.dataset_selector import create_dataset_selector, get_selected_datasets
from data.datasets import prepare_datasets, create_models_config
from training.trainers import train_models, train_fixed_xanfis_model
from evaluation.trust_evaluator import enhanced_trust_ade_evaluation
from analysis.results import print_dataset_summary, print_final_analysis
from utils.io_utils import save_results_and_visualizations
from config.settings import XANFIS_AVAILABLE


def run_comparison(selected_datasets=None, cuda_only=False, no_cuda=False, quick_mode=False, verbose=False):
    """–ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö"""
    
    print("=" * 100)
    print("üî¨ –ü–†–û–î–í–ò–ù–£–¢–û–ï –°–†–ê–í–ù–ï–ù–ò–ï ML –ú–û–î–ï–õ–ï–ô –° TRUST-ADE PROTOCOL + CUDA")
    print("üöÄ –í–∫–ª—é—á–∞–µ—Ç GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")
    print("=" * 100)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    all_datasets = prepare_datasets()
    models_config = create_models_config()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ
    if selected_datasets:
        datasets = {name: info for name, info in all_datasets.items() 
                   if name in selected_datasets}
        print(f"üìä –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã: {', '.join(selected_datasets)}")
    else:
        datasets = all_datasets
        print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–∞—Ç–∞—Å–µ—Ç—ã: {', '.join(datasets.keys())}")

    all_results = {}

    for dataset_name, dataset_info in datasets.items():
        print(f"\n{'=' * 80}")
        print(f"üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –î–ê–¢–ê–°–ï–¢–ï: {dataset_name.upper()}")
        print(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {dataset_info['description']}")
        print(f"üè∑Ô∏è –î–æ–º–µ–Ω: {dataset_info['domain']}")
        print(f"üéØ –¢–∏–ø –∑–∞–¥–∞—á–∏: {dataset_info['type']}")
        print("=" * 80)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        X, y = dataset_info['X'], dataset_info['y']
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {X.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤, {X.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"üìä –ö–ª–∞—Å—Å—ã: {np.bincount(y)} (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(np.unique(y))})")

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.3, random_state=42, stratify=y
        )
        print(f"üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {len(X_train)} –æ–±—É—á–µ–Ω–∏–µ / {len(X_test)} —Ç–µ—Å—Ç")

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        print(f"\nü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
        trained_models = train_models(
            X_train, X_test, y_train, y_test,
            dataset_info['feature_names'], models_config,
            dataset_info['type'], dataset_name
        )

        # –û–±—É—á–µ–Ω–∏–µ XANFIS
        if XANFIS_AVAILABLE and not cuda_only:
            wrapped_xanfis, xanfis_scaler, xanfis_accuracy, xanfis_time = train_fixed_xanfis_model(
                X_train, X_test, y_train, y_test, dataset_name, dataset_info['type']
            )

            if wrapped_xanfis and xanfis_accuracy > 0.1:
                trained_models['XANFIS'] = {
                    'wrapped_model': wrapped_xanfis,
                    'scaler': xanfis_scaler,
                    'training_time': xanfis_time,
                    'accuracy': xanfis_accuracy,
                    'needs_scaling': True,
                    'description': 'Adaptive Neuro-Fuzzy Inference System',
                    'color': '#9932CC',
                    'use_cuda': False
                }

        # Trust-ADE –æ—Ü–µ–Ω–∫–∞
        enhanced_trust_ade_evaluation(trained_models, X_test, y_test, dataset_info['domain'], X_train)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        all_results[dataset_name] = {
            'dataset_info': dataset_info,
            'models': trained_models,
            'X_test_shape': X_test.shape,
            'y_test_shape': y_test.shape
        }

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print_dataset_summary(dataset_name, trained_models)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    print_final_analysis(all_results)
    results_dir = save_results_and_visualizations(all_results)

    print(f"\nüéâ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_dir}")
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ:")
    print(f"  ‚Ä¢ CSV —Ñ–∞–π–ª—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏ –∫—Ä–∞—Ç–∫–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
    print(f"  ‚Ä¢ JSON —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)")
    print(f"  ‚Ä¢ 4+ —Ç–∏–ø–æ–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å CUDA –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π")
    print(f"  üöÄ CUDA —É—Å–∫–æ—Ä–µ–Ω–∏–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –º–æ–¥–µ–ª–µ–π")

    return all_results, results_dir


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ XANFIS"""

    from cli.dataset_selector import create_dataset_selector, get_selected_datasets

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = create_dataset_selector()
    args = parser.parse_args()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
    selected_datasets = get_selected_datasets(args)

    if not selected_datasets:
        print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –¥–∞—Ç–∞—Å–µ—Ç!")
        return

    try:
        all_results, results_dir = run_comparison(
            selected_datasets=selected_datasets,
            cuda_only=args.cuda_only,
            no_cuda=args.no_cuda,
            quick_mode=args.quick,
            verbose=args.verbose
        )

        print(f"\n‚úÖ –ü–û–õ–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(all_results)} –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
        print(f"üíæ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_dir}")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–ì–û —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ML —Å CUDA –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
    main()

