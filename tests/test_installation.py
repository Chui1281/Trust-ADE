"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Trust-ADE Protocol
"""

import sys
import os
import warnings


def test_basic_imports():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        sys.path.insert(0, project_root)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        from trust_ade import TrustADE
        from trust_ade import ExplainabilityScore, RobustnessIndex, BiasShiftIndex
        from models import SklearnWrapper
        from explainers import SHAPExplainer

        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
        return False


def test_dependencies():
    """–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    required_packages = [
        'numpy', 'pandas', 'scikit-learn', 'scipy'
    ]

    optional_packages = [
        'shap', 'matplotlib', 'seaborn'
    ]

    missing_required = []
    missing_optional = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_required.append(package)
            print(f"‚ùå {package} (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    for package in optional_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)")
        except ImportError:
            missing_optional.append(package)
            print(f"‚ö†Ô∏è {package} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)")

    if missing_required:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_required)}")
        return False

    if missing_optional:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_optional)}")
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    return True


def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")

    try:
        import numpy as np
        from sklearn.datasets import make_classification
        from sklearn.ensemble import RandomForestClassifier

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        sys.path.insert(0, project_root)

        from models.sklearn_wrapper import SklearnWrapper
        from trust_ade import TrustADE

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        X, y = make_classification(n_samples=100, n_features=5, random_state=42)

        # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å
        model = RandomForestClassifier(n_estimators=10, random_state=42)
        model.fit(X, y)

        # Wrapper
        wrapped_model = SklearnWrapper(model)
        print("‚úÖ SklearnWrapper —Å–æ–∑–¥–∞–Ω")

        # Trust-ADE
        trust_evaluator = TrustADE(wrapped_model, domain='general', training_data=X)
        print("‚úÖ TrustADE –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞
        results = trust_evaluator.evaluate(X[:20], y[:20], verbose=False)
        trust_score = results['trust_score']

        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, Trust Score: {trust_score:.3f}")

        if 0 <= trust_score <= 1:
            print("‚úÖ Trust Score –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
            return True
        else:
            print(f"‚ùå Trust Score –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [0,1]: {trust_score}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


def test_explainer_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ explainer"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ explainer...")

    try:
        import numpy as np
        from sklearn.datasets import make_classification
        from sklearn.ensemble import RandomForestClassifier

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        sys.path.insert(0, project_root)

        from models.sklearn_wrapper import SklearnWrapper
        from trust_ade import TrustADE
        from trust_ade.utils import safe_explain

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        X, y = make_classification(n_samples=50, n_features=5, random_state=42)

        model = RandomForestClassifier(n_estimators=5, random_state=42)
        model.fit(X, y)
        wrapped_model = SklearnWrapper(model)

        # –¢–µ—Å—Ç —Å SHAP
        try:
            trust_evaluator = TrustADE(wrapped_model, explainer_type='shap', training_data=X)
            explanations = safe_explain(trust_evaluator.explainer, X[:5])

            if explanations.shape == (5, 5):
                print("‚úÖ SHAP explainer —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print(f"‚ö†Ô∏è SHAP explainer: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ {explanations.shape}")

        except Exception as e:
            print(f"‚ö†Ô∏è SHAP explainer: {str(e)}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ explainer: {str(e)}")
        return False


def generate_installation_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    print("\n" + "=" * 60)
    print("üìã –û–¢–ß–ï–¢ –û–ë –£–°–¢–ê–ù–û–í–ö–ï TRUST-ADE PROTOCOL")
    print("=" * 60)

    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_basic_imports),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", test_dependencies),
        ("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", test_basic_functionality),
        ("Explainer —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", test_explainer_compatibility)
    ]

    passed_tests = 0
    total_tests = len(tests)

    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}:")
        print("-" * 40)

        try:
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                result = test_func()

            if result:
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed_tests += 1
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")

        except Exception as e:
            print(f"üí• {test_name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {str(e)}")

    # –ò—Ç–æ–≥–∏
    print(f"\n" + "=" * 60)
    print(f"üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"=" * 60)

    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {(passed_tests / total_tests) * 100:.1f}%")

    if passed_tests == total_tests:
        status = "üéâ –û–¢–õ–ò–ß–ù–û"
        message = "Trust-ADE Protocol –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
    elif passed_tests >= total_tests * 0.75:
        status = "‚úÖ –•–û–†–û–®–û"
        message = "Trust-ADE Protocol –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤, –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    elif passed_tests >= total_tests * 0.5:
        status = "‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û"
        message = "Trust-ADE Protocol —á–∞—Å—Ç–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
    else:
        status = "‚ùå –ü–†–û–ë–õ–ï–ú–´"
        message = "Trust-ADE Protocol —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏"

    print(f"\n{status}: {message}")

    return passed_tests == total_tests


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Trust-ADE Protocol")
    success = generate_installation_report()

    if success:
        print(f"\nüéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'python examples/demo_trust_ade.py'")
    else:
        print(f"\nüîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
