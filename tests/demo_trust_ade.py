"""
–û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–º–æ Trust-ADE Protocol –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ –¥–æ–≤–µ—Ä–∏—è
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

from models.sklearn_wrapper import SklearnWrapper
from trust_ade.trust_ade import TrustADE


def demo_medical_diagnosis():
    """–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Trust-ADE –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("=" * 60)
    print("üè• –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø TRUST-ADE: –ú–ï–î–ò–¶–ò–ù–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
    print("=" * 60)

    try:
        # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        data = load_breast_cancer()
        X, y = data.data, data.target
        feature_names = data.feature_names

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {X.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤ —Å {X.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
        print(f"‚úÖ –ö–ª–∞—Å—Å—ã: {np.bincount(y)} (0=–∑–ª–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è, 1=–¥–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è)")

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42, stratify=y
        )

        # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥—Ä–µ–π—Ñ–æ–º
        np.random.seed(42)
        X_reference = X_train + np.random.normal(0, 0.02, X_train.shape)
        y_reference = y_train

        print(f"‚úÖ –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤")
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤")
        print(f"‚úÖ –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_reference.shape[0]} –æ–±—Ä–∞–∑—Ü–æ–≤")

        # 2. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        print("\nü§ñ –≠—Ç–∞–ø 2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
        model = RandomForestClassifier(
            n_estimators=100,
            max_depth=10,
            random_state=42
        )
        model.fit(X_train, y_train)

        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
        train_accuracy = model.score(X_train, y_train)
        test_accuracy = model.score(X_test, y_test)

        print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: Random Forest (100 –¥–µ—Ä–µ–≤—å–µ–≤)")
        print(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏: {train_accuracy:.3f}")
        print(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–µ: {test_accuracy:.3f}")

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–µ—Ä—Ç–∫–∏ –º–æ–¥–µ–ª–∏
        wrapped_model = SklearnWrapper(model, feature_names=list(feature_names))
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ SklearnWrapper")

        # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø)
        np.random.seed(42)
        protected_data = np.random.choice([0, 1], size=len(y_test), p=[0.6, 0.4])
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: {np.bincount(protected_data)} (0=–º–æ–ª–æ–¥—ã–µ, 1=–ø–æ–∂–∏–ª—ã–µ)")

        # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Trust-ADE
        print("\nüéØ –≠—Ç–∞–ø 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Trust-ADE")
        trust_evaluator = TrustADE(
            model=wrapped_model,
            domain='medical',  # –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–æ–º–µ–Ω - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏
            protected_attributes=['age_group'],
            explainer_type='shap',
            training_data=X_train
        )

        print(f"‚úÖ Trust-ADE –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–æ–º–µ–Ω–∞: medical")
        print(f"‚úÖ –û–±—ä—è—Å–Ω–∏—Ç–µ–ª—å: SHAP TreeExplainer")
        print(f"‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: {trust_evaluator.protected_attributes}")

        # 6. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        print("\nüîç –≠—Ç–∞–ø 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–æ–≤–µ—Ä–∏—è")
        results = trust_evaluator.evaluate(
            X_test=X_test,
            y_test=y_test,
            X_reference=X_reference,
            y_reference=y_reference,
            protected_data=protected_data,
            verbose=True
        )

        # 7. –í—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 60)
        print("üìä –û–°–ù–û–í–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 60)

        print(f"üéØ Trust Score: {results['trust_score']:.3f}")
        print(f"üìà –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {results['trust_level']}")
        print(f"üè∑Ô∏è –î–æ–º–µ–Ω: {results['domain']}")

        print(f"\nüìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
        print(f"  ‚Ä¢ Explainability Score: {results['explainability_score']:.3f}")
        print(f"  ‚Ä¢ Robustness Index: {results['robustness_index']:.3f}")
        print(f"  ‚Ä¢ Bias Shift Index: {results['bias_shift_index']:.3f}")
        print(f"  ‚Ä¢ Concept Drift Rate: {results['concept_drift_rate']:.3f}")

        # 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –≤—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        print("\nüìÑ –≠—Ç–∞–ø 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        report = trust_evaluator.generate_report()
        print(report)

        # 9. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(results['recommendations'], 1):
            print(f"  {i}. {rec}")

        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return results

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()
        return None


def demo_financial_scoring():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Trust-ADE –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "=" * 60)
    print("üí≥ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø TRUST-ADE: –ö–†–ï–î–ò–¢–ù–´–ô –°–ö–û–†–ò–ù–ì")
    print("=" * 60)

    try:
        from sklearn.datasets import make_classification

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        X, y = make_classification(
            n_samples=2000,
            n_features=15,
            n_informative=12,
            n_redundant=3,
            n_clusters_per_class=2,
            class_sep=0.8,
            random_state=42
        )

        feature_names = [
            'income', 'credit_history', 'debt_ratio', 'employment_length',
            'loan_amount', 'loan_term', 'credit_score', 'assets_value',
            'education', 'marital_status', 'dependents', 'residence_type',
            'job_type', 'bank_relationship', 'previous_loans'
        ]

        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {X.shape[0]} –∑–∞—è–≤–æ–∫ –Ω–∞ –∫—Ä–µ–¥–∏—Ç")
        print(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏: {len(feature_names)} —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.25, random_state=42, stratify=y
        )

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        print("\nü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏...")
        model = LogisticRegression(
            random_state=42,
            max_iter=1000,
            C=1.0
        )
        model.fit(X_train_scaled, y_train)

        accuracy = model.score(X_test_scaled, y_test)
        print(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy:.3f}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–ø–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç)
        np.random.seed(42)
        protected_data = np.random.choice([0, 1], size=len(y_test), p=[0.55, 0.45])
        print(f"‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: {np.bincount(protected_data)} (0=–º—É–∂—á–∏–Ω—ã, 1=–∂–µ–Ω—â–∏–Ω—ã)")

        # Trust-ADE –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –¥–æ–º–µ–Ω–∞
        wrapped_model = SklearnWrapper(model, feature_names=feature_names)
        trust_evaluator = TrustADE(
            model=wrapped_model,
            domain='finance',  # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–æ–º–µ–Ω - –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            protected_attributes=['gender'],
            training_data=X_train_scaled
        )

        print("\nüîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ Trust-ADE –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")
        results = trust_evaluator.evaluate(
            X_test=X_test_scaled,
            y_test=y_test,
            protected_data=protected_data,
            verbose=False
        )

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüéØ Trust Score: {results['trust_score']:.3f}")
        print(f"üìà –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {results['trust_level']}")
        print(f"üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print(f"  ‚Ä¢ –û–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å: {results['explainability_score']:.3f}")
        print(f"  ‚Ä¢ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å: {results['robustness_index']:.3f}")
        print(f"  ‚Ä¢ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å: {1 - results['bias_shift_index']:.3f}")

        return results

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        return None


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π Trust-ADE Protocol")

    # –û—Å–Ω–æ–≤–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    medical_results = demo_medical_diagnosis()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    financial_results = demo_financial_scoring()

    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if medical_results and financial_results:
        print("\n" + "=" * 60)
        print("üîç –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
        print("=" * 60)

        print(f"–ú–µ–¥–∏—Ü–∏–Ω–∞  - Trust Score: {medical_results['trust_score']:.3f} ({medical_results['trust_level']})")
        print(f"–§–∏–Ω–∞–Ω—Å—ã   - Trust Score: {financial_results['trust_score']:.3f} ({financial_results['trust_level']})")

        print(f"\n–†–∞–∑–ª–∏—á–∏—è –≤ –≤–µ—Å–∞—Ö:")
        med_weights = medical_results['weights_used']
        fin_weights = financial_results['weights_used']

        print(f"–û–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å: –ú–µ–¥–∏—Ü–∏–Ω–∞ {med_weights['w_E']:.2f} vs –§–∏–Ω–∞–Ω—Å—ã {fin_weights['w_E']:.2f}")
        print(f"–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å: –ú–µ–¥–∏—Ü–∏–Ω–∞ {med_weights['w_R']:.2f} vs –§–∏–Ω–∞–Ω—Å—ã {fin_weights['w_R']:.2f}")
        print(f"–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å: –ú–µ–¥–∏—Ü–∏–Ω–∞ {med_weights['w_F']:.2f} vs –§–∏–Ω–∞–Ω—Å—ã {fin_weights['w_F']:.2f}")

    print("\nüéâ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
