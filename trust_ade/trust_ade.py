"""
–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Trust-ADE –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–æ–≤–µ—Ä–∏—è –∫ –ò–ò-—Å–∏—Å—Ç–µ–º–∞–º
"""

import numpy as np
import warnings
import sys
import os

from .explainability_score import ExplainabilityScore
from .robustness_index import RobustnessIndex
from .bias_shift_index import BiasShiftIndex
from .concept_drift import ConceptDrift
from .trust_calculator import TrustCalculator
from .utils import validate_inputs, check_explainer_compatibility


class TrustADE:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Trust-ADE –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥–æ–≤–µ—Ä–∏—è –∫ –ò–ò-—Å–∏—Å—Ç–µ–º–∞–º

    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ü–µ–Ω–∫–∏:
    - Explainability Score (–æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å)
    - Robustness Index (—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å)
    - Bias Shift Index (—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å)
    - Concept Drift Rate (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏)
    """

    def __init__(self, model, domain='general', protected_attributes=None,
                 explainer_type='shap', expert_causal_graph=None, training_data=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã Trust-ADE

        Args:
            model: ML –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–¥–æ–ª–∂–Ω–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å BaseModel –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
            domain: –¥–æ–º–µ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è ('medical', 'finance', 'criminal_justice', 'general')
            protected_attributes: —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
            explainer_type: —Ç–∏–ø –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—è ('shap', 'lime', 'auto')
            expert_causal_graph: —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫–∞—É–∑–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            training_data: –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—è
        """
        self.model = model
        self.domain = domain
        self.protected_attributes = protected_attributes or []
        self.expert_causal_graph = expert_causal_graph
        self.training_data = training_data

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏
        self.es_calculator = ExplainabilityScore()
        self.ri_calculator = RobustnessIndex()
        self.bsi_calculator = BiasShiftIndex(protected_attributes)
        self.cd_detector = ConceptDrift()
        self.trust_calc = TrustCalculator(domain)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—è
        self.explainer = self._create_explainer(explainer_type, training_data)

        # –ö–µ—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.last_results = None
        self._evaluation_history = []

    def _is_xanfis_model(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å XANFIS"""
        model_to_check = self.model

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ—Ä—Ç–∫–∏
        if hasattr(model_to_check, 'model'):
            model_to_check = model_to_check.model

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞ –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ XANFIS
        model_name = str(type(model_to_check)).lower()

        return (
                'xanfis' in model_name or
                'anfis' in model_name or
                'trustadecompatible' in model_name or  # –í–∞—à –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å
                hasattr(model_to_check, 'get_fuzzy_rules') or
                hasattr(model_to_check, 'get_feature_importance') or
                hasattr(model_to_check, 'get_explanation_quality')
        )

    def _create_explainer(self, explainer_type, training_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞"""
        try:
            # üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º XANFIS –º–æ–¥–µ–ª—å –ø–µ—Ä–≤—ã–º
            if self._is_xanfis_model():
                try:
                    from explainers.xanfis_explainer import create_xanfis_explainer
                    explainer = create_xanfis_explainer(self.model, self.model.get_feature_names())
                    print("üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è XANFISExplainer (–ø—Ä–∞–≤–∏–ª–∞)")
                    return explainer
                except ImportError as e:
                    print(f"‚ö†Ô∏è XANFISExplainer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏—Ä–∫—É–ª—è—Ä–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if explainer_type == 'shap':
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
                    from explainers.shap_explainer import SHAPExplainer
                    return SHAPExplainer(self.model, training_data)
                except ImportError:
                    # Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å
                    warnings.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å SHAP explainer, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
                    return self._create_simple_explainer()
            else:
                warnings.warn(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø explainer: {explainer_type}")
                return self._create_simple_explainer()

        except Exception as e:
            warnings.warn(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è explainer: {str(e)}")
            return self._create_simple_explainer()

    def _create_simple_explainer(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—è –∫–∞–∫ fallback"""

        class SimpleExplainer:
            def __init__(self, model):
                self.model = model

            def explain(self, X):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –º–æ–¥–µ–ª–∏
                    importance = self.model.get_feature_importance()
                    if importance is not None and len(importance) == X.shape[1]:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–æ–≤ –Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç—å
                        return X * importance.reshape(1, -1)
                    else:
                        # Fallback: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –≤–µ—Å–∞
                        return X * (1.0 / X.shape[1])
                except Exception as e:
                    warnings.warn(f"–û—à–∏–±–∫–∞ –≤ simple explainer: {str(e)}")
                    return np.zeros_like(X)

            def shap_values(self, X):
                """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å SHAP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
                return self.explain(X)

        return SimpleExplainer(self.model)

    def _calculate_xanfis_explainability_score(self, X_test, y_test):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏ –¥–ª—è XANFIS"""

        try:
            print("üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º XANFIS-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏...")

            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç XANFIS explainer
            if hasattr(self.explainer, 'get_explanation_quality'):
                quality_metrics = self.explainer.get_explanation_quality()

                # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
                base_score = quality_metrics.get('explanation_score', 0.1)

                # –ë–æ–Ω—É—Å—ã –∑–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ XANFIS
                rule_bonus = min(0.3, quality_metrics.get('rules_count', 0) * 0.03)  # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª–∞
                coverage_bonus = quality_metrics.get('feature_coverage', 0) * 0.2  # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–∫—Ä—ã—Ç–∏–µ
                confidence_bonus = quality_metrics.get('rule_confidence', 0.7) * 0.1  # –ë–æ–Ω—É—Å –∑–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

                # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏
                final_score = min(1.0, base_score + rule_bonus + coverage_bonus + confidence_bonus)

                print(f"   üéØ XANFIS –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å: {final_score:.3f}")
                print(f"   üìã –ü—Ä–∞–≤–∏–ª: {quality_metrics.get('rules_count', 0)}")
                print(f"   üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {quality_metrics.get('feature_coverage', 0):.2f}")
                print(f"   üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª: {quality_metrics.get('rule_confidence', 0.7):.2f}")

                return {
                    'explainability_score': final_score,
                    'causal_fidelity': base_score * 0.8,  # –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∏—á–∏–Ω–Ω–æ—Å—Ç—å
                    'semantic_coherence': coverage_bonus * 3,  # –ü—Ä–∞–≤–∏–ª–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–Ω—ã
                    'interpretation_stability': confidence_bonus * 10,  # –ü—Ä–∞–≤–∏–ª–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã
                    'human_comprehensibility': min(0.9, rule_bonus * 5 + 0.4)  # –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–Ω—è—Ç–Ω—ã –ª—é–¥—è–º
                }
            else:print("‚ö†Ô∏è XANFIS explainer –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç get_explanation_quality")
        except:pass

    def evaluate(self, X_test, y_test, protected_data=None, X_reference=None,
                 expert_ratings=None, n_samples=100, verbose=True):
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ Trust-ADE —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

        Args:
            n_samples: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
            verbose: –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        try:
            # üî• –î–û–ë–ê–í–ò–¢–¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–£ –ü–ï–†–ï–î –í–´–ß–ò–°–õ–ï–ù–ò–ï–ú –ú–ï–¢–†–ò–ö
            if verbose:
                print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –ú–ï–¢–†–ò–ö:")
                print(f"   üìä X_test shape: {X_test.shape}")
                print(f"   üìä X_reference: {'–ï—Å—Ç—å' if X_reference is not None else '–ù–ï–¢'}")
                print(f"   üìä protected_data: {'–ï—Å—Ç—å' if protected_data is not None else '–ù–ï–¢'}")

                if X_reference is not None:
                    print(f"   üìä X_reference shape: {X_reference.shape}")

                if protected_data is not None:
                    print(f"   üìä protected_data type: {type(protected_data)}")
                    if hasattr(protected_data, '__len__'):
                        print(f"   üìä protected_data length: {len(protected_data)}")
                        unique_vals, counts = np.unique(protected_data, return_counts=True)
                        print(f"   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {unique_vals}")
                        print(f"   üìä –†–∞–∑–º–µ—Ä—ã –≥—Ä—É–ø–ø: {counts}")

            if verbose:
                print("üîç –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ Trust-ADE...")
                print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(X_test)} –æ–±—Ä–∞–∑—Ü–æ–≤ —Å {n_samples} —Ç–µ—Å—Ç–∞–º–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            X_test, y_test = validate_inputs(X_test, y_test)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ explainer
            if not check_explainer_compatibility(self.explainer):
                warnings.warn("‚ö†Ô∏è Explainer –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å Trust-ADE")

            # 1. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ Explainability Score
            if verbose:
                print("üìä –í—ã—á–∏—Å–ª—è–µ–º Explainability Score...")

            es_results = self.es_calculator.calculate(
                self.model, self.explainer, X_test, y_test,
                expert_graph=self.expert_causal_graph,
                expert_ratings=expert_ratings
            )

            # üî• –ù–û–í–û–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è XANFIS
            if self._is_xanfis_model():
                es_results = self._calculate_xanfis_explainability_score(X_test, y_test)
            else:
                es_results = self.es_calculator.calculate(
                    self.model, self.explainer, X_test, y_test,
                    expert_graph=self.expert_causal_graph,
                    expert_ratings=expert_ratings
                )

            es = es_results['explainability_score']

            # 2. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ Robustness Index —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if verbose:
                print("üõ°Ô∏è –í—ã—á–∏—Å–ª—è–µ–º Robustness Index...")

            ri_results = self.ri_calculator.calculate(
                self.model, self.explainer, X_test, y_test,
                n_samples=n_samples,  # üî• –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†
                verbose=verbose  # üî• –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†
            )
            ri = ri_results['robustness_index']

            # 3. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ Bias Shift Index (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
            bsi = 0.0
            bsi_results = {'bias_shift_index': 0.0}

            if X_reference is not None and protected_data is not None:
                if verbose:
                    print("‚öñÔ∏è –í—ã—á–∏—Å–ª—è–µ–º Bias Shift Index...")

                try:
                    y_pred_current = self.model.predict(X_test)
                    y_pred_baseline = self.model.predict(X_reference)

                    bsi_results = self.bsi_calculator.calculate(
                        y_test, y_pred_current, y_pred_baseline, protected_data
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∞
                    )
                    bsi = bsi_results['bias_shift_index']
                except Exception as e:
                    warnings.warn(f"üö® –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è BSI: {str(e)}")

            # 4. Concept Drift Rate –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            cdr = 0.0
            cdr_results = {'concept_drift_rate': 0.0}

            if X_reference is not None:
                if verbose:
                    print("üìà –í—ã—á–∏—Å–ª—è–µ–º Concept Drift Rate...")

                try:
                    y_pred_current = self.model.predict(X_test)
                    y_pred_reference = self.model.predict(X_reference)

                    cdr_results = self.cd_detector.calculate(
                        X_reference, X_test, y_pred_reference, y_pred_current
                    )
                    cdr = cdr_results['concept_drift_rate']
                except Exception as e:
                    warnings.warn(f"üö® –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è CDR: {str(e)}")

            # 5. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ Trust Score
            if verbose:
                print("üéØ –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π Trust Score...")

            trust_results = self.trust_calc.calculate_trust_score(es, ri, bsi, cdr)

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            final_results = {
                'trust_score': trust_results['trust_score'],
                'trust_level': self.trust_calc.get_trust_level_description(trust_results['trust_score']),
                'explainability_score': es,
                'robustness_index': ri,
                'bias_shift_index': bsi,
                'concept_drift_rate': cdr,
                'components': trust_results['components'],
                'weights_used': trust_results['weights_used'],
                'domain': self.domain,
                'analysis_params': {  # üî• –ù–û–í–ê–Ø –°–ï–ö–¶–ò–Ø
                    'n_samples_used': n_samples,
                    'has_reference_data': X_reference is not None,
                    'has_protected_attributes': protected_data is not None,
                    'total_test_samples': len(X_test)
                },
                'detailed_results': {
                    'explainability_details': es_results,
                    'robustness_details': ri_results,
                    'bias_details': bsi_results,
                    'drift_details': cdr_results
                },
                'recommendations': self.trust_calc.get_recommendations(trust_results),
                'evaluation_timestamp': np.datetime64('now')
            }

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.last_results = final_results
            self._evaluation_history.append(final_results)

            if verbose:
                print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! Trust Score: {final_results['trust_score']:.3f}")
                print(f"üìä –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {final_results['trust_level']}")
                print(f"üõ°Ô∏è Robustness: {ri:.3f} | ‚öñÔ∏è Fairness: {1 - bsi:.3f} | üìä Explainability: {es:.3f}")

            return final_results

        except Exception as e:
            error_msg = f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Ü–µ–Ω–∫–µ Trust-ADE: {str(e)}"
            warnings.warn(error_msg)
            if verbose:
                print(error_msg)
            return None

    def generate_report(self, results=None, output_file=None):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ—Ü–µ–Ω–∫–∏

        Args:
            results: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
            output_file: —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            str: —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        if results is None:
            results = self.last_results

        if results is None:
            return "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ evaluate()."

        try:
            if 'error' in results:
                report = f"""
‚ùå –û–¢–ß–ï–¢ TRUST-ADE: –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø ‚ùå

–û—à–∏–±–∫–∞: {results['error']}
–í—Ä–µ–º—è: {results.get('evaluation_timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã.
"""
            else:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                trust_score = results['trust_score']
                trust_level = results['trust_level']

                report = f"""
=== üìä –û–¢–ß–ï–¢ TRUST-ADE ===

üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ–≤–µ—Ä–∏—è: {trust_score:.3f}
üìà –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {trust_level}
üè∑Ô∏è –î–æ–º–µ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: {results['domain']}
üïê –í—Ä–µ–º—è –æ—Ü–µ–Ω–∫–∏: {results.get('evaluation_timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

=== üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ===
‚Ä¢ Explainability Score: {results['explainability_score']:.3f}
‚Ä¢ Robustness Index: {results['robustness_index']:.3f}
‚Ä¢ Bias Shift Index: {results['bias_shift_index']:.3f}
‚Ä¢ Concept Drift Rate: {results['concept_drift_rate']:.3f}

=== ‚öñÔ∏è –í–µ—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–¥–æ–º–µ–Ω: {results['domain']}) ===
‚Ä¢ –û–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å (w_E): {results['weights_used']['w_E']:.3f}
‚Ä¢ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å (w_R): {results['weights_used']['w_R']:.3f}
‚Ä¢ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å (w_F): {results['weights_used']['w_F']:.3f}
‚Ä¢ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥—Ä–µ–π—Ñ—É (Œ≥): {results['weights_used']['gamma']:.1f}

=== üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏ ===
‚Ä¢ –ö–∞—É–∑–∞–ª—å–Ω–∞—è —Ñ–∏–¥–µ–ª–∏—Ç–∏: {results['detailed_results']['explainability_details']['causal_fidelity']:.3f}
‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å: {results['detailed_results']['explainability_details']['semantic_coherence']:.3f}
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π: {results['detailed_results']['explainability_details']['interpretation_stability']:.3f}
‚Ä¢ –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å: {results['detailed_results']['explainability_details']['human_comprehensibility']:.3f}

=== üõ°Ô∏è –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ ===
‚Ä¢ Adversarial —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å: {results['detailed_results']['robustness_details']['adversarial_robustness']:.3f}
‚Ä¢ –®—É–º–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å: {results['detailed_results']['robustness_details']['noise_robustness']:.3f}
‚Ä¢ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–π: {results['detailed_results']['robustness_details']['explanation_robustness']:.3f}

=== üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ==="""

                for i, rec in enumerate(results['recommendations'], 1):
                    report += f"\n{i}. {rec}"

                report += "\n\n=== üìä –í–∫–ª–∞–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç ==="
                components = results['components']
                report += f"\n‚Ä¢ –û—Ç –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏: {components['explainability_component']:.3f}"
                report += f"\n‚Ä¢ –û—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏: {components['robustness_component']:.3f}"
                report += f"\n‚Ä¢ –û—Ç —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏: {components['fairness_component']:.3f}"
                report += f"\n‚Ä¢ –®—Ç—Ä–∞—Ñ –∑–∞ –¥—Ä–µ–π—Ñ: {components['drift_penalty']:.3f}"

                report += "\n\n=========================="

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if output_file:
                try:
                    with open(output_file, 'w', encoding='utf-8') as f:
                        f.write(report)
                    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
                except Exception as e:
                    warnings.warn(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")

            return report

        except Exception as e:
            error_report = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"
            warnings.warn(error_report)
            return error_report

    def get_trust_level(self, trust_score=None):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è

        Args:
            trust_score: —Å—á–µ—Ç –¥–æ–≤–µ—Ä–∏—è (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)

        Returns:
            str: –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è
        """
        if trust_score is None:
            if self.last_results is None:
                return "–û—Ü–µ–Ω–∫–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞"
            trust_score = self.last_results.get('trust_score', 0.0)

        return self.trust_calc.get_trust_level_description(trust_score)

    def get_evaluation_history(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫

        Returns:
            list: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
        """
        return self._evaluation_history.copy()

    def calibrate_weights(self, expert_trust_ratings, evaluation_data):
        """
        –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤–µ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫

        Args:
            expert_trust_ratings: —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –¥–æ–≤–µ—Ä–∏—è
            evaluation_data: —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏

        Returns:
            dict: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Å–∞
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏
            computed_scores = []
            for data in evaluation_data:
                if isinstance(data, dict):
                    es = data.get('explainability_score', 0.5)
                    ri = data.get('robustness_index', 0.5)
                    bsi = data.get('bias_shift_index', 0.0)
                    cdr = data.get('concept_drift_rate', 0.0)
                else:
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ data —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ (es, ri, bsi, cdr)
                    es, ri, bsi, cdr = data

                computed_scores.append((es, ri, bsi, cdr))

            return self.trust_calc.adaptive_weight_calibration(
                expert_trust_ratings, computed_scores
            )

        except Exception as e:
            warnings.warn(f"–û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤–µ—Å–æ–≤: {str(e)}")
            return self.trust_calc.weights
