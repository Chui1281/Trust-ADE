"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏ –¥–æ–≤–µ—Ä–∏—è Trust-ADE
–í–µ—Ä—Å–∏—è 2.0 - –ø–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import numpy as np
import warnings
from typing import List, Dict, Tuple, Optional, Any


class TrustCalculator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏ –¥–æ–≤–µ—Ä–∏—è Trust-ADE
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å –≤ –µ–¥–∏–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å

    –í–µ—Ä—Å–∏—è 2.0 –≤–∫–ª—é—á–∞–µ—Ç:
    - Verbose —Ä–µ–∂–∏–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è
    - –ò—Å—Ç–æ—Ä–∏—é –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    - –£–ª—É—á—à–µ–Ω–Ω—É—é –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –≤–µ—Å–æ–≤
    """

    def __init__(self, domain='general'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–æ–≤–µ—Ä–∏—è

        Args:
            domain: –¥–æ–º–µ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è ('medical', 'finance', 'criminal_justice', 'industrial', 'general')
        """
        self.domain = domain
        self.weights = self._load_domain_weights(domain)
        self._trust_history = []  # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ–≤–µ—Ä–∏—è
        self._validation_enabled = True  # –í–∫–ª—é—á–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def _load_domain_weights(self, domain: str) -> Dict[str, float]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è

        Args:
            domain: –¥–æ–º–µ–Ω –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è

        Returns:
            dict: —Å–ª–æ–≤–∞—Ä—å —Å –≤–µ—Å–∞–º–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        domain_configs = {
            'medical': {
                'w_E': 0.5,  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏ –≤ –º–µ–¥–∏—Ü–∏–Ω–µ
                'w_R': 0.3,  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
                'w_F': 0.2,  # –ë–∞–∑–æ–≤–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
                'gamma': 2.0,  # –í—ã—Å–æ–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥—Ä–µ–π—Ñ—É
                'description': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏'
            },
            'finance': {
                'w_E': 0.3,  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏
                'w_R': 0.4,  # –í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
                'w_F': 0.3,  # –í–∞–∂–Ω–æ—Å—Ç—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
                'gamma': 1.5,  # –°—Ä–µ–¥–Ω—è—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥—Ä–µ–π—Ñ—É
                'description': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫'
            },
            'criminal_justice': {
                'w_E': 0.3,  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏
                'w_R': 0.2,  # –ù–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
                'w_F': 0.5,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
                'gamma': 2.5,  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥—Ä–µ–π—Ñ—É
                'description': '–°–∏—Å—Ç–µ–º—ã —É–≥–æ–ª–æ–≤–Ω–æ–π —é—Å—Ç–∏—Ü–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏'
            },
            'industrial': {
                'w_E': 0.25,  # –ù–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏
                'w_R': 0.5,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
                'w_F': 0.25,  # –ë–∞–∑–æ–≤–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
                'gamma': 1.0,  # –ù–∏–∑–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥—Ä–µ–π—Ñ—É
                'description': '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏'
            },
            'general': {
                'w_E': 0.4,  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏
                'w_R': 0.3,  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
                'w_F': 0.3,  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
                'gamma': 1.0,  # –°—Ä–µ–¥–Ω—è—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥—Ä–µ–π—Ñ—É
                'description': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –º–µ—Ç—Ä–∏–∫'
            }
        }

        config = domain_configs.get(domain, domain_configs['general'])

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
        total_weight = config['w_E'] + config['w_R'] + config['w_F']
        if total_weight > 0:
            config['w_E'] /= total_weight
            config['w_R'] /= total_weight
            config['w_F'] /= total_weight
        else:
            warnings.warn("–°—É–º–º–∞ –≤–µ—Å–æ–≤ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–µ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            config.update(domain_configs['general'])

        return config

    def _validate_inputs(self, explainability_score: float, robustness_index: float,
                        bias_shift_index: float, concept_drift_rate: float) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Trust-ADE

        Args:
            explainability_score: –æ—Ü–µ–Ω–∫–∞ –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏
            robustness_index: –∏–Ω–¥–µ–∫—Å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
            bias_shift_index: –∏–Ω–¥–µ–∫—Å —Å–º–µ—â–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏
            concept_drift_rate: —Å–∫–æ—Ä–æ—Å—Ç—å –¥—Ä–µ–π—Ñ–∞ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤

        Returns:
            bool: True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞

        Raises:
            ValueError: –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        if not self._validation_enabled:
            return True

        inputs = {
            'explainability_score': explainability_score,
            'robustness_index': robustness_index,
            'bias_shift_index': bias_shift_index,
            'concept_drift_rate': concept_drift_rate
        }

        for name, value in inputs.items():
            if value is None:
                raise ValueError(f"{name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None")

            if not isinstance(value, (int, float, np.number)):
                raise ValueError(f"{name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω {type(value)}")

            if np.isnan(value) or np.isinf(value):
                raise ValueError(f"{name} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (NaN –∏–ª–∏ Inf)")

            if not (0 <= value <= 1):
                warnings.warn(f"{name} = {value:.4f} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω [0,1], –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")

        return True

    def calculate_trust_score(self, explainability_score: float, robustness_index: float,
                            bias_shift_index: float, concept_drift_rate: float,
                            verbose: bool = False) -> Dict[str, Any]:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ Trust-ADE Score —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º—É–ª–µ –∏–∑ —Å—Ç–∞—Ç—å–∏:
        Trust_ADE = w_E √ó ES + w_R √ó (RI √ó e^(-Œ≥ √ó CDR)) + w_F √ó (1 - BSI)

        Args:
            explainability_score: –æ—Ü–µ–Ω–∫–∞ –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏ [0, 1]
            robustness_index: –∏–Ω–¥–µ–∫—Å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ [0, 1]
            bias_shift_index: –∏–Ω–¥–µ–∫—Å —Å–º–µ—â–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ [0, 1]
            concept_drift_rate: —Å–∫–æ—Ä–æ—Å—Ç—å –¥—Ä–µ–π—Ñ–∞ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤ [0, 1]
            verbose: –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è

        Returns:
            dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            if verbose:
                print(f"üéØ Trust-ADE —Ä–∞—Å—á–µ—Ç –¥–ª—è –¥–æ–º–µ–Ω–∞ '{self.domain}'")
                print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.weights.get('description', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è')}")
                print(f"üìä –í–µ—Å–∞: ES={self.weights['w_E']:.3f}, RI={self.weights['w_R']:.3f}, F={self.weights['w_F']:.3f}")
                print(f"‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä Œ≥ (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥—Ä–µ–π—Ñ—É): {self.weights['gamma']:.2f}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self._validate_inputs(explainability_score, robustness_index,
                                bias_shift_index, concept_drift_rate)

            if verbose:
                print(f"üìä –í—Ö–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
                print(f"   ES (–û–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å): {explainability_score:.3f}")
                print(f"   RI (–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å): {robustness_index:.3f}")
                print(f"   BSI (–°–º–µ—â–µ–Ω–∏–µ): {bias_shift_index:.3f}")
                print(f"   CDR (–î—Ä–µ–π—Ñ): {concept_drift_rate:.3f}")

            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            w_E = self.weights['w_E']
            w_R = self.weights['w_R']
            w_F = self.weights['w_F']
            gamma = self.weights['gamma']

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º [0, 1]
            explainability_score = max(0, min(1, explainability_score))
            robustness_index = max(0, min(1, robustness_index))
            bias_shift_index = max(0, min(1, bias_shift_index))
            concept_drift_rate = max(0, min(1, concept_drift_rate))

            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ–æ—Ä–º—É–ª—ã Trust-ADE
            explainability_component = w_E * explainability_score

            # –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —à—Ç—Ä–∞—Ñ–æ–º –∑–∞ –¥—Ä–µ–π—Ñ
            drift_penalty = np.exp(-gamma * concept_drift_rate)
            robustness_component = w_R * (robustness_index * drift_penalty)

            # –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å (–∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bias_shift_index)
            fairness_component = w_F * (1 - bias_shift_index)

            # –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç –¥–æ–≤–µ—Ä–∏—è
            trust_score = explainability_component + robustness_component + fairness_component

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º [0, 1]
            trust_score = max(0, min(1, trust_score))

            # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            trust_level = self.get_trust_level_description(trust_score)

            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            component_quality = self._analyze_component_quality(
                explainability_component, robustness_component, fairness_component, drift_penalty
            )

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = {
                'trust_score': trust_score,
                'trust_level': trust_level,
                'trust_level_numeric': self._get_trust_level_numeric(trust_score),
                'components': {
                    'explainability_component': explainability_component,
                    'robustness_component': robustness_component,
                    'fairness_component': fairness_component,
                    'drift_penalty': drift_penalty
                },
                'component_quality': component_quality,
                'weights_used': self.weights.copy(),
                'domain': self.domain,
                'input_metrics': {
                    'explainability_score': explainability_score,
                    'robustness_index': robustness_index,
                    'bias_shift_index': bias_shift_index,
                    'concept_drift_rate': concept_drift_rate
                },
                'analysis_metadata': {
                    'validation_passed': True,
                    'weights_normalized': True,
                    'drift_impact': 1 - drift_penalty,
                    'dominant_component': max([
                        ('explainability', explainability_component),
                        ('robustness', robustness_component),
                        ('fairness', fairness_component)
                    ], key=lambda x: x[1])[0]
                },
                'timestamp': np.datetime64('now')
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._trust_history.append(result)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π)
            if len(self._trust_history) > 100:
                self._trust_history = self._trust_history[-50:]

            if verbose:
                print(f"üéØ –ò—Ç–æ–≥–æ–≤—ã–π Trust Score: {trust_score:.3f}")
                print(f"üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
                print(f"   –û–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å: {explainability_component:.3f} (–≤–∫–ª–∞–¥: {explainability_component/trust_score*100:.1f}%)")
                print(f"   –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å: {robustness_component:.3f} (–≤–∫–ª–∞–¥: {robustness_component/trust_score*100:.1f}%)")
                print(f"   –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å: {fairness_component:.3f} (–≤–∫–ª–∞–¥: {fairness_component/trust_score*100:.1f}%)")
                print(f"üèÜ –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {trust_level}")
                print(f"‚ö†Ô∏è  –í–ª–∏—è–Ω–∏–µ –¥—Ä–µ–π—Ñ–∞: {(1-drift_penalty)*100:.1f}% —à—Ç—Ä–∞—Ñ–∞")
                print(f"üéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {result['analysis_metadata']['dominant_component']}")

            return result

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤ calculate_trust_score: {str(e)}"
            warnings.warn(error_msg)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return {
                'trust_score': 0.5,
                'trust_level': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ (–æ—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)',
                'trust_level_numeric': 2,
                'components': {
                    'explainability_component': 0.2,
                    'robustness_component': 0.15,
                    'fairness_component': 0.15,
                    'drift_penalty': 1.0
                },
                'component_quality': 'error',
                'weights_used': self.weights.copy(),
                'domain': self.domain,
                'error': error_msg,
                'timestamp': np.datetime64('now')
            }

    def _analyze_component_quality(self, expl_comp: float, robust_comp: float,
                                  fair_comp: float, drift_penalty: float) -> Dict[str, str]:
        """
        –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Trust-ADE

        Returns:
            dict: –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        """
        def quality_level(score: float, thresholds: List[float] = [0.8, 0.6, 0.4, 0.2]) -> str:
            if score >= thresholds[0]:
                return "–æ—Ç–ª–∏—á–Ω–æ–µ"
            elif score >= thresholds[1]:
                return "—Ö–æ—Ä–æ—à–µ–µ"
            elif score >= thresholds[2]:
                return "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
            elif score >= thresholds[3]:
                return "–Ω–∏–∑–∫–æ–µ"
            else:
                return "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ"

        return {
            'explainability_quality': quality_level(expl_comp),
            'robustness_quality': quality_level(robust_comp),
            'fairness_quality': quality_level(fair_comp),
            'drift_impact_quality': quality_level(drift_penalty),
            'overall_balance': '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ' if max(expl_comp, robust_comp, fair_comp) - min(expl_comp, robust_comp, fair_comp) < 0.2 else '–Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ'
        }

    def _get_trust_level_numeric(self, trust_score: float) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

        Returns:
            int: 4 - –≤—ã—Å–æ–∫–æ–µ, 3 - —É–º–µ—Ä–µ–Ω–Ω–æ–µ, 2 - –Ω–∏–∑–∫–æ–µ, 1 - –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ, 0 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ
        """
        if trust_score >= 0.8:
            return 4
        elif trust_score >= 0.6:
            return 3
        elif trust_score >= 0.4:
            return 2
        elif trust_score >= 0.2:
            return 1
        else:
            return 0

    def analyze_trust_trend(self, window_size: int = 5) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è

        Args:
            window_size: —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞

        Returns:
            dict: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–¥–µ –¥–æ–≤–µ—Ä–∏—è
        """
        if len(self._trust_history) < 2:
            return {
                'trend': 'insufficient_data',
                'slope': 0.0,
                'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞'
            }

        recent_scores = [entry['trust_score'] for entry in self._trust_history[-window_size:]]

        if len(recent_scores) >= 2:
            # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–µ–Ω–¥–∞
            x = np.arange(len(recent_scores))
            slope = np.polyfit(x, recent_scores, 1)[0]

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            if slope > 0.02:
                trend = 'improving'
                trend_description = '—É–ª—É—á—à–∞–µ—Ç—Å—è'
            elif slope < -0.02:
                trend = 'declining'
                trend_description = '—É—Ö—É–¥—à–∞–µ—Ç—Å—è'
            else:
                trend = 'stable'
                trend_description = '—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ'

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            current_score = recent_scores[-1]
            previous_score = recent_scores[-2] if len(recent_scores) >= 2 else current_score
            change = current_score - previous_score

            return {
                'trend': trend,
                'trend_description': trend_description,
                'slope': slope,
                'recent_scores': recent_scores,
                'current_score': current_score,
                'previous_score': previous_score,
                'absolute_change': change,
                'relative_change': (change / previous_score * 100) if previous_score > 0 else 0,
                'window_size': len(recent_scores),
                'volatility': np.std(recent_scores) if len(recent_scores) > 1 else 0
            }

        return {'trend': 'stable', 'slope': 0.0}

    def get_trust_history(self, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ–≤–µ—Ä–∏—è

        Args:
            limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (None –¥–ª—è –≤—Å–µ—Ö)

        Returns:
            list: –∏—Å—Ç–æ—Ä–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π Trust-ADE
        """
        if limit is None:
            return self._trust_history.copy()
        else:
            return self._trust_history[-limit:].copy() if self._trust_history else []

    def clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"""
        self._trust_history.clear()

    def adaptive_weight_calibration(self, expert_trust_ratings: List[float],
                                  computed_scores: List[Tuple[float, float, float, float]],
                                  learning_rate: float = 0.01, regularization: float = 0.1,
                                  max_iterations: int = 100, verbose: bool = False) -> Dict[str, float]:
        """
        –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤–µ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –¥–æ–≤–µ—Ä–∏—è

        Args:
            expert_trust_ratings: —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –¥–æ–≤–µ—Ä–∏—è [0, 1]
            computed_scores: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (ES, RI, BSI, CDR) –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ü–µ–Ω–∫–∏
            learning_rate: —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
            regularization: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏
            max_iterations: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
            verbose: –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏

        Returns:
            dict: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        """
        try:
            if len(expert_trust_ratings) != len(computed_scores):
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å")

            if len(expert_trust_ratings) < 2:
                warnings.warn("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤–µ—Å–æ–≤")
                return self.weights

            if verbose:
                print(f"üîß –ù–∞—á–∏–Ω–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –≤–µ—Å–æ–≤ –¥–ª—è –¥–æ–º–µ–Ω–∞ '{self.domain}'")
                print(f"üìä –î–∞–Ω–Ω—ã–µ: {len(expert_trust_ratings)} —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫")

            # –ù–∞—á–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞
            current_weights = np.array([self.weights['w_E'], self.weights['w_R'], self.weights['w_F']])
            gamma = self.weights['gamma']

            expert_ratings = np.array(expert_trust_ratings)
            best_weights = current_weights.copy()
            best_error = float('inf')
            error_history = []

            for iteration in range(max_iterations):
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –≤–µ—Å–∞–º–∏
                predictions = []
                for es, ri, bsi, cdr in computed_scores:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                    es = max(0, min(1, es))
                    ri = max(0, min(1, ri))
                    bsi = max(0, min(1, bsi))
                    cdr = max(0, min(1, cdr))

                    # –§–æ—Ä–º—É–ª–∞ Trust-ADE
                    pred = (current_weights[0] * es +
                            current_weights[1] * (ri * np.exp(-gamma * cdr)) +
                            current_weights[2] * (1 - bsi))
                    predictions.append(max(0, min(1, pred)))

                predictions = np.array(predictions)

                # –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫—É (MSE)
                error = np.mean((predictions - expert_ratings) ** 2)
                error_history.append(error)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–µ –≤–µ—Å–∞
                if error < best_error:
                    best_error = error
                    best_weights = current_weights.copy()

                # –†–∞–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø—Ä–∏–µ–º–ª–µ–º–æ–π –æ—à–∏–±–∫–∏
                if error < 0.01:
                    if verbose:
                        print(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª–µ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration + 1}")
                    break

                # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
                gradient = np.zeros(3)
                for i, (es, ri, bsi, cdr) in enumerate(computed_scores):
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                    es = max(0, min(1, es))
                    ri = max(0, min(1, ri))
                    bsi = max(0, min(1, bsi))
                    cdr = max(0, min(1, cdr))

                    pred_error = predictions[i] - expert_ratings[i]

                    # –ß–∞—Å—Ç–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–æ –≤–µ—Å–∞–º
                    gradient[0] += 2 * pred_error * es
                    gradient[1] += 2 * pred_error * (ri * np.exp(-gamma * cdr))
                    gradient[2] += 2 * pred_error * (1 - bsi)

                gradient /= len(computed_scores)

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—é
                gradient += regularization * current_weights

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞
                current_weights -= learning_rate * gradient

                # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–µ—Å–æ–≤
                current_weights = np.abs(current_weights)

                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
                weight_sum = np.sum(current_weights)
                if weight_sum > 0:
                    current_weights = current_weights / weight_sum
                else:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –≤–µ—Å–∞–º –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
                    current_weights = np.array([self.weights['w_E'], self.weights['w_R'], self.weights['w_F']])
                    warnings.warn("–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤–µ—Å–æ–≤, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")
                    break

                if verbose and (iteration + 1) % 20 == 0:
                    print(f"üìä –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration + 1}: MSE = {error:.6f}, –í–µ—Å–∞ = [{current_weights[0]:.3f}, {current_weights[1]:.3f}, {current_weights[2]:.3f}]")

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –ª—É—á—à–∏–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            old_weights = self.weights.copy()
            self.weights['w_E'] = best_weights[0]
            self.weights['w_R'] = best_weights[1]
            self.weights['w_F'] = best_weights[2]

            if verbose:
                print(f"üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                print(f"üìà –ò—Ç–æ–≥–æ–≤–∞—è –æ—à–∏–±–∫–∞: {best_error:.6f}")
                print(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤:")
                print(f"   ES: {old_weights['w_E']:.3f} ‚Üí {self.weights['w_E']:.3f}")
                print(f"   RI: {old_weights['w_R']:.3f} ‚Üí {self.weights['w_R']:.3f}")
                print(f"   F:  {old_weights['w_F']:.3f} ‚Üí {self.weights['w_F']:.3f}")

            return {
                **self.weights,
                'calibration_stats': {
                    'final_error': best_error,
                    'iterations_completed': len(error_history),
                    'error_history': error_history,
                    'improvement': (error_history[0] - best_error) / error_history * 100 if error_history else 0,
                    'converged': error < 0.01
                }
            }

        except Exception as e:
            warnings.warn(f"–û—à–∏–±–∫–∞ –≤ adaptive_weight_calibration: {str(e)}")
            return self.weights

    def get_trust_level_description(self, trust_score: float) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è

        Args:
            trust_score: —Å—á–µ—Ç –¥–æ–≤–µ—Ä–∏—è [0, 1]

        Returns:
            str: –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è
        """
        if trust_score >= 0.8:
            return "–í—ã—Å–æ–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ"
        elif trust_score >= 0.6:
            return "–£–º–µ—Ä–µ–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ"
        elif trust_score >= 0.4:
            return "–ù–∏–∑–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ"
        elif trust_score >= 0.2:
            return "–û—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ"
        else:
            return "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –¥–æ–≤–µ—Ä–∏–µ"

    def get_recommendations(self, trust_results: Dict[str, Any]) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –¥–æ–≤–µ—Ä–∏—è

        Args:
            trust_results: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è

        Returns:
            list: —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        recommendations = []

        try:
            components = trust_results.get('components', {})
            trust_score = trust_results.get('trust_score', 0.5)
            domain = trust_results.get('domain', 'general')

            # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
            if trust_score < 0.6:
                recommendations.append(f"üö® –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è ({trust_score:.3f}) —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –¥–æ–º–µ–Ω–∞ '{domain}'")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –¥–æ–º–µ–Ω–∞
            expl_comp = components.get('explainability_component', 0)
            robust_comp = components.get('robustness_component', 0)
            fair_comp = components.get('fairness_component', 0)
            drift_penalty = components.get('drift_penalty', 1)

            # –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–≤–∏—Å—è—Ç –æ—Ç –¥–æ–º–µ–Ω–∞
            domain_thresholds = {
                'medical': {'expl': 0.25, 'robust': 0.15, 'fair': 0.10},
                'finance': {'expl': 0.15, 'robust': 0.20, 'fair': 0.15},
                'criminal_justice': {'expl': 0.15, 'robust': 0.10, 'fair': 0.25},
                'industrial': {'expl': 0.12, 'robust': 0.25, 'fair': 0.12},
                'general': {'expl': 0.15, 'robust': 0.15, 'fair': 0.15}
            }

            thresholds = domain_thresholds.get(domain, domain_thresholds['general'])

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏
            if expl_comp < thresholds['expl']:
                recommendations.append(
                    f"üìä –û–±—ä—è—Å–Ω–∏–º–æ—Å—Ç—å ({expl_comp:.3f}) –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞ '{domain}'. "
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —É–ª—É—á—à–∏—Ç—å –∫–∞—É–∑–∞–ª—å–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, "
                    "–¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é, –ø–æ–≤—ã—Å–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å"
                )

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
            if robust_comp < thresholds['robust']:
                recommendations.append(
                    f"üõ°Ô∏è –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å ({robust_comp:.3f}) —Ç—Ä–µ–±—É–µ—Ç —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è. "
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Å—Ç–∏ adversarial training, —É–ª—É—á—à–∏—Ç—å noise tolerance, "
                    "—Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–º—É—â–µ–Ω–∏—è—Ö –¥–∞–Ω–Ω—ã—Ö"
                )

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏
            if fair_comp < thresholds['fair']:
                recommendations.append(
                    f"‚öñÔ∏è –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å ({fair_comp:.3f}) –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏. "
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Å—Ç–∏ fairness audit, –ø—Ä–∏–º–µ–Ω–∏—Ç—å bias mitigation techniques, "
                    "–æ–±–µ—Å–ø–µ—á–∏—Ç—å —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø"
                )

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥—Ä–µ–π—Ñ—É –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
            if drift_penalty < 0.8:
                drift_impact = (1 - drift_penalty) * 100
                recommendations.append(
                    f"üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π concept drift (—à—Ç—Ä–∞—Ñ {drift_impact:.1f}%). "
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, "
                    "—É—Å–∏–ª–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –≤–Ω–µ–¥—Ä–∏—Ç—å adaptive learning"
                )

            # –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            component_analysis = trust_results.get('component_quality', {})
            if component_analysis.get('overall_balance') == '–Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ':
                recommendations.append(
                    "‚öñÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–≤–µ—Ä–∏—è –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã. "
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –≤–µ—Å–æ–≤ "
                    "–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –¥–æ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"
                )

            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –¥–æ–º–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            domain_specific = self._get_domain_specific_recommendations(domain, trust_results)
            recommendations.extend(domain_specific)

            if not recommendations:
                recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –≤–æ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö")

        except Exception as e:
            warnings.warn(f"–û—à–∏–±–∫–∞ –≤ get_recommendations: {str(e)}")
            recommendations.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

        return recommendations

    def _get_domain_specific_recommendations(self, domain: str, trust_results: Dict[str, Any]) -> List[str]:
        """
        –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –¥–æ–º–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

        Args:
            domain: –¥–æ–º–µ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            trust_results: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–≤–µ—Ä–∏—è

        Returns:
            list: –¥–æ–º–µ–Ω–Ω–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        domain_recs = {
            'medical': [
                "üè• –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º: –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ FDA 21 CFR Part 820",
                "üî¨ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —Å —É—á–∞—Å—Ç–∏–µ–º –≤—Ä–∞—á–µ–π",
                "üìã –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞—É–¥–∏—Ç–∞"
            ],
            'finance': [
                "üí∞ –î–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ Basel III –∏ MiFID II —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º",
                "üìä –û–±–µ—Å–ø–µ—á–∏—Ç—å real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤",
                "üîç –ü—Ä–æ–≤–µ—Å—Ç–∏ stress-testing –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö"
            ],
            'criminal_justice': [
                "‚öñÔ∏è –î–ª—è —Å–∏—Å—Ç–µ–º —É–≥–æ–ª–æ–≤–Ω–æ–π —é—Å—Ç–∏—Ü–∏–∏: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç –Ω–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å",
                "üë• –û–±–µ—Å–ø–µ—á–∏—Ç—å equal treatment –¥–ª—è –≤—Å–µ—Ö –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø",
                "üìú –°–æ–±–ª—é–¥–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ due process"
            ],
            'industrial': [
                "üè≠ –î–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ISO 26262 (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)",
                "‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è real-time –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π",
                "üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SCADA —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏"
            ]
        }

        return domain_recs.get(domain, [])

    def export_configuration(self) -> Dict[str, Any]:
        """
        –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞

        Returns:
            dict: –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        """
        return {
            'domain': self.domain,
            'weights': self.weights.copy(),
            'history_length': len(self._trust_history),
            'validation_enabled': self._validation_enabled,
            'version': '2.0',
            'export_timestamp': str(np.datetime64('now'))
        }

    def import_configuration(self, config: Dict[str, Any]):
        """
        –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞

        Args:
            config: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            self.domain = config.get('domain', 'general')
            if 'weights' in config:
                self.weights.update(config['weights'])
            self._validation_enabled = config.get('validation_enabled', True)
        except Exception as e:
            warnings.warn(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")

    def set_validation_mode(self, enabled: bool):
        """
        –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        Args:
            enabled: –≤–∫–ª—é—á–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é
        """
        self._validation_enabled = enabled

    def get_summary_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π

        Returns:
            dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        """
        if not self._trust_history:
            return {'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}

        scores = [entry['trust_score'] for entry in self._trust_history]

        return {
            'total_evaluations': len(self._trust_history),
            'average_trust_score': np.mean(scores),
            'trust_score_std': np.std(scores),
            'min_trust_score': np.min(scores),
            'max_trust_score': np.max(scores),
            'domain': self.domain,
            'current_weights': self.weights.copy(),
            'trend_analysis': self.analyze_trust_trend(),
            'evaluation_period': {
                'first_evaluation': str(self._trust_history[0]['timestamp']),
                'last_evaluation': str(self._trust_history[-1]['timestamp'])
            } if self._trust_history else None
        }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞
    trust_calc = TrustCalculator(domain='medical')

    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Trust-ADE Calculator v2.0\n")

    # –í—ã—á–∏—Å–ª—è–µ–º Trust Score —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    result = trust_calc.calculate_trust_score(
        explainability_score=0.85,
        robustness_index=0.78,
        bias_shift_index=0.12,
        concept_drift_rate=0.05,
        verbose=True
    )

    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for rec in trust_calc.get_recommendations(result):
        print(f"  {rec}")

    print("\nüìä –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    config = trust_calc.export_configuration()
    print(f"  –î–æ–º–µ–Ω: {config['domain']}")
    print(f"  –í–µ—Å–∞: ES={config['weights']['w_E']:.3f}, RI={config['weights']['w_R']:.3f}, F={config['weights']['w_F']:.3f}")
