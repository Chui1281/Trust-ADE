"""
Trust-ADE Concept Drift Detection Module
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è CD_R = Œª¬∑KS(P_t, P_t-Œît) + (1-Œª)¬∑JS(P_t, P_t-Œît)
"""

import numpy as np
import warnings
from scipy.stats import ks_2samp, entropy
from scipy.spatial.distance import jensenshannon, cosine
from typing import Dict, List, Optional, Tuple, Any, Union


class ConceptDrift:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥—Ä–µ–π—Ñ–∞ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ Trust-ADE

    –†–µ–∞–ª–∏–∑—É–µ—Ç —Ñ–æ—Ä–º—É–ª—É: CD_R = Œª¬∑KS(P_t, P_t-Œît) + (1-Œª)¬∑JS(P_t, P_t-Œît)
    –≥–¥–µ:
    - KS: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ö–æ–ª–º–æ–≥–æ—Ä–æ–≤–∞-–°–º–∏—Ä–Ω–æ–≤–∞
    - JS: –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –ô–µ–Ω—Å–µ–Ω–∞-–®–µ–Ω–Ω–æ–Ω–∞
    - Œª: –ø–∞—Ä–∞–º–µ—Ç—Ä –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –º–µ–∂–¥—É KS –∏ JS
    """

    def __init__(self, lambda_param: float = 0.5, n_bins: int = 10,
                 significance_level: float = 0.05):
        """
        Args:
            lambda_param: Œª - –ø–∞—Ä–∞–º–µ—Ç—Ä –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ KS –∏ JS (0 ‚â§ Œª ‚â§ 1)
            n_bins: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–Ω–æ–≤ –¥–ª—è –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            significance_level: —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
        """
        self.lambda_param = np.clip(lambda_param, 0.0, 1.0)
        self.n_bins = max(5, n_bins)  # –º–∏–Ω–∏–º—É–º 5 –±–∏–Ω–æ–≤
        self.significance_level = significance_level

        print(f"üîÑ Trust-ADE Concept Drift Detector initialized:")
        print(f"   Œª (KS weight): {self.lambda_param:.3f}")
        print(f"   JS weight: {1 - self.lambda_param:.3f}")
        print(f"   Bins: {self.n_bins}")

    def kolmogorov_smirnov_drift(self, X_reference: np.ndarray,
                                 X_current: np.ndarray) -> float:
        """
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ö–æ–ª–º–æ–≥–æ—Ä–æ–≤–∞-–°–º–∏—Ä–Ω–æ–≤–∞ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—Ä–µ–π—Ñ–∞ –¥–∞–Ω–Ω—ã—Ö

        KS —Ç–µ—Å—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–≤—É—Ö –≤—ã–±–æ—Ä–æ–∫

        Args:
            X_reference: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ [n_samples, n_features]
            X_current: —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ [n_samples, n_features]

        Returns:
            float: —Å—Ä–µ–¥–Ω—è—è KS —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º [0, 1]
        """
        try:
            X_reference = np.array(X_reference)
            X_current = np.array(X_current)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
            if len(X_reference.shape) == 1:
                X_reference = X_reference.reshape(-1, 1)
            if len(X_current.shape) == 1:
                X_current = X_current.reshape(-1, 1)

            if X_reference.shape[1] != X_current.shape[1]:
                warnings.warn("üö® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
                return 1.0  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥—Ä–µ–π—Ñ

            ks_statistics = []

            for feature_idx in range(X_reference.shape[1]):
                ref_feature = X_reference[:, feature_idx]
                curr_feature = X_current[:, feature_idx]

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                ref_var = np.var(ref_feature)
                curr_var = np.var(curr_feature)

                if ref_var < 1e-12 and curr_var < 1e-12:
                    # –û–±–∞ –ø—Ä–∏–∑–Ω–∞–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã
                    if np.abs(np.mean(ref_feature) - np.mean(curr_feature)) < 1e-12:
                        ks_statistics.append(0.0)  # –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
                    else:
                        ks_statistics.append(1.0)  # —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
                    continue

                try:
                    # –î–≤—É—Ö–≤—ã–±–æ—Ä–æ—á–Ω—ã–π KS —Ç–µ—Å—Ç
                    ks_statistic, p_value = ks_2samp(ref_feature, curr_feature)

                    # KS —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ [0, 1]
                    ks_statistics.append(np.clip(ks_statistic, 0.0, 1.0))

                except Exception as e:
                    warnings.warn(f"üö® KS —Ç–µ—Å—Ç failed –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–∞ {feature_idx}: {str(e)}")
                    ks_statistics.append(0.5)  # —Å—Ä–µ–¥–Ω–∏–π –¥—Ä–µ–π—Ñ –ø—Ä–∏ –æ—à–∏–±–∫–µ

            # –°—Ä–µ–¥–Ω—è—è KS —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
            mean_ks = np.mean(ks_statistics) if ks_statistics else 0.0
            return np.clip(mean_ks, 0.0, 1.0)

        except Exception as e:
            warnings.warn(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ kolmogorov_smirnov_drift: {str(e)}")
            return 0.5

    def jensen_shannon_divergence(self, P_reference: np.ndarray,
                                  P_current: np.ndarray) -> float:
        """
        –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –ô–µ–Ω—Å–µ–Ω–∞-–®–µ–Ω–Ω–æ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º—É–ª–µ Trust-ADE

        JS(P, Q) = 0.5 * [KL(P || M) + KL(Q || M)], –≥–¥–µ M = 0.5 * (P + Q)

        Args:
            P_reference: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ)
            P_current: —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ

        Returns:
            float: JS –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è [0, 1]
        """
        try:
            P_reference = np.array(P_reference).flatten()
            P_current = np.array(P_current).flatten()

            if len(P_reference) == 0 or len(P_current) == 0:
                return 0.0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (–¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –∏–ª–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ)
            ref_unique = len(np.unique(P_reference))
            curr_unique = len(np.unique(P_current))

            if ref_unique <= self.n_bins and curr_unique <= self.n_bins:
                # –î–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø—Ä—è–º–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                all_values = np.unique(np.concatenate([P_reference, P_current]))

                ref_counts = np.array([np.sum(P_reference == val) for val in all_values])
                curr_counts = np.array([np.sum(P_current == val) for val in all_values])

            else:
                # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
                min_val = min(np.min(P_reference), np.min(P_current))
                max_val = max(np.max(P_reference), np.max(P_current))

                if max_val - min_val < 1e-12:
                    return 0.0  # –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

                # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–µ –±–∏–Ω—ã –¥–ª—è –æ–±–µ–∏—Ö –≤—ã–±–æ—Ä–æ–∫
                bins = np.linspace(min_val, max_val, self.n_bins + 1)

                ref_counts, _ = np.histogram(P_reference, bins=bins)
                curr_counts, _ = np.histogram(P_current, bins=bins)

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            ref_probs = ref_counts / (np.sum(ref_counts) + 1e-12)
            curr_probs = curr_counts / (np.sum(curr_counts) + 1e-12)

            # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∞ –æ—Ç –Ω—É–ª—è
            epsilon = 1e-12
            ref_probs = ref_probs + epsilon
            curr_probs = curr_probs + epsilon

            # –†–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
            ref_probs = ref_probs / np.sum(ref_probs)
            curr_probs = curr_probs / np.sum(curr_probs)

            # Jensen-Shannon –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
            js_divergence = jensenshannon(ref_probs, curr_probs)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN/Inf –∑–Ω–∞—á–µ–Ω–∏–π
            if np.isnan(js_divergence) or np.isinf(js_divergence):
                return 0.5

            # JS –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è —É–∂–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1]
            return np.clip(js_divergence, 0.0, 1.0)

        except Exception as e:
            warnings.warn(f"üö® –û—à–∏–±–∫–∞ –≤ jensen_shannon_divergence: {str(e)}")
            return 0.5

    def explanation_quality_drift(self, explanations_reference: np.ndarray,
                                  explanations_current: np.ndarray) -> float:
        """
        –î—Ä–µ–π—Ñ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π - —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å Trust-ADE

        –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é –æ–±—ä—è—Å–Ω–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏

        Args:
            explanations_reference: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è [n_samples, n_features]
            explanations_current: —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è [n_samples, n_features]

        Returns:
            float: –º–µ—Ä–∞ –¥—Ä–µ–π—Ñ–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π [0, 1]
        """
        try:
            if explanations_reference is None or explanations_current is None:
                return 0.0

            explanations_reference = np.array(explanations_reference)
            explanations_current = np.array(explanations_current)

            if explanations_reference.size == 0 or explanations_current.size == 0:
                return 0.0

            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ 2D –º–∞—Å—Å–∏–≤–∞–º
            if len(explanations_reference.shape) == 1:
                explanations_reference = explanations_reference.reshape(-1, 1)
            if len(explanations_current.shape) == 1:
                explanations_current = explanations_current.reshape(-1, 1)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
            if explanations_reference.shape[1] != explanations_current.shape[1]:
                warnings.warn("üö® –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return 1.0

            # –ú–µ—Ç—Ä–∏–∫–∏ –¥—Ä–µ–π—Ñ–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
            drift_metrics = []

            # 1. –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ä–µ–¥–Ω–∏–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
            mean_ref = np.mean(explanations_reference, axis=0)
            mean_curr = np.mean(explanations_current, axis=0)

            if np.linalg.norm(mean_ref) > 1e-12 and np.linalg.norm(mean_curr) > 1e-12:
                cosine_drift = cosine(mean_ref, mean_curr)
                if not (np.isnan(cosine_drift) or np.isinf(cosine_drift)):
                    drift_metrics.append(cosine_drift)

            # 2. –†–∞–∑–Ω–æ—Å—Ç—å —ç–Ω—Ç—Ä–æ–ø–∏–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            ref_importance = np.abs(explanations_reference).mean(axis=0)
            curr_importance = np.abs(explanations_current).mean(axis=0)

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            ref_importance = ref_importance / (np.sum(ref_importance) + 1e-12)
            curr_importance = curr_importance / (np.sum(curr_importance) + 1e-12)

            ref_entropy = entropy(ref_importance + 1e-12)
            curr_entropy = entropy(curr_importance + 1e-12)

            max_entropy = np.log(len(ref_importance))
            if max_entropy > 1e-12:
                entropy_drift = abs(ref_entropy - curr_entropy) / max_entropy
                drift_metrics.append(entropy_drift)

            # 3. KS —Ç–µ—Å—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º
            ks_drifts = []
            for feature_idx in range(explanations_reference.shape[1]):
                ref_feature_exp = explanations_reference[:, feature_idx]
                curr_feature_exp = explanations_current[:, feature_idx]

                if np.var(ref_feature_exp) > 1e-12 or np.var(curr_feature_exp) > 1e-12:
                    try:
                        ks_stat, _ = ks_2samp(ref_feature_exp, curr_feature_exp)
                        ks_drifts.append(ks_stat)
                    except:
                        continue

            if ks_drifts:
                drift_metrics.append(np.mean(ks_drifts))

            # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥—Ä–µ–π—Ñ–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
            if drift_metrics:
                explanation_drift = np.mean(drift_metrics)
                return np.clip(explanation_drift, 0.0, 1.0)
            else:
                return 0.5

        except Exception as e:
            warnings.warn(f"üö® –û—à–∏–±–∫–∞ –≤ explanation_quality_drift: {str(e)}")
            return 0.5

    def calculate_concept_drift_rate(self, X_reference: np.ndarray,
                                     X_current: np.ndarray,
                                     y_pred_reference: Optional[np.ndarray] = None,
                                     y_pred_current: Optional[np.ndarray] = None,
                                     explanations_reference: Optional[np.ndarray] = None,
                                     explanations_current: Optional[np.ndarray] = None) -> float:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ Trust-ADE –¥–ª—è Concept-Drift Rate:
        CD_R = Œª¬∑KS(P_t, P_t-Œît) + (1-Œª)¬∑JS(P_t, P_t-Œît)

        Args:
            X_reference: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            X_current: —Ç–µ–∫—É—â–∏–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            y_pred_reference: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            y_pred_current: —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            explanations_reference: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            explanations_current: —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            float: Concept-Drift Rate [0, 1]
        """
        try:
            # 1. KS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - –¥—Ä–µ–π—Ñ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            ks_component = self.kolmogorov_smirnov_drift(X_reference, X_current)

            # 2. JS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–ª—É—á—à–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            js_component = 0.0

            if y_pred_reference is not None and y_pred_current is not None:
                # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞–∫ –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ
                js_component = self.jensen_shannon_divergence(y_pred_reference, y_pred_current)
            else:
                # Fallback –∫ –∞–Ω–∞–ª–∏–∑—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç PCA –∏–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º
                ref_summary = np.mean(X_reference, axis=1)
                curr_summary = np.mean(X_current, axis=1)
                js_component = self.jensen_shannon_divergence(ref_summary, curr_summary)

            # 3. üéØ –§–û–†–ú–£–õ–ê TRUST-ADE
            cd_rate = (self.lambda_param * ks_component +
                       (1 - self.lambda_param) * js_component)

            return np.clip(cd_rate, 0.0, 1.0)

        except Exception as e:
            warnings.warn(f"üö® –û—à–∏–±–∫–∞ –≤ calculate_concept_drift_rate: {str(e)}")
            return 0.5

    def calculate(self, X_reference: np.ndarray, X_current: np.ndarray,
                  y_pred_reference: Optional[np.ndarray] = None,
                  y_pred_current: Optional[np.ndarray] = None,
                  explanations_reference: Optional[np.ndarray] = None,
                  explanations_current: Optional[np.ndarray] = None,
                  verbose: bool = True) -> Dict[str, float]:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Concept Drift —Å–æ–≥–ª–∞—Å–Ω–æ Trust-ADE —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π

        Args:
            X_reference: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            X_current: —Ç–µ–∫—É—â–∏–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            y_pred_reference: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            y_pred_current: —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            explanations_reference: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            explanations_current: —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            verbose: –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            Dict[str, float]: –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥—Ä–µ–π—Ñ–∞
        """
        try:
            if verbose:
                print(f"üîÑ Trust-ADE Concept Drift Analysis...")

            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥—Ä–µ–π—Ñ–∞
            ks_drift = self.kolmogorov_smirnov_drift(X_reference, X_current)

            # JS –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö
            js_drift = 0.0
            if y_pred_reference is not None and y_pred_current is not None:
                js_drift = self.jensen_shannon_divergence(y_pred_reference, y_pred_current)
                data_source = "predictions"
            else:
                ref_summary = np.mean(X_reference, axis=1)
                curr_summary = np.mean(X_current, axis=1)
                js_drift = self.jensen_shannon_divergence(ref_summary, curr_summary)
                data_source = "input_features"

            # –î—Ä–µ–π—Ñ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π (—É–Ω–∏–∫–∞–ª—å–Ω–æ –¥–ª—è Trust-ADE)
            explanation_drift = 0.0
            if explanations_reference is not None and explanations_current is not None:
                explanation_drift = self.explanation_quality_drift(
                    explanations_reference, explanations_current
                )

            # üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ Trust-ADE
            concept_drift_rate = (self.lambda_param * ks_drift +
                                  (1 - self.lambda_param) * js_drift)

            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è –¥—Ä–µ–π—Ñ–∞
            if concept_drift_rate < 0.1:
                drift_level = "Minimal"
            elif concept_drift_rate < 0.3:
                drift_level = "Low"
            elif concept_drift_rate < 0.5:
                drift_level = "Moderate"
            elif concept_drift_rate < 0.7:
                drift_level = "High"
            else:
                drift_level = "Critical"

            results = {
                'concept_drift_rate': np.clip(concept_drift_rate, 0.0, 1.0),
                'ks_drift': np.clip(ks_drift, 0.0, 1.0),
                'js_divergence': np.clip(js_drift, 0.0, 1.0),
                'explanation_drift': np.clip(explanation_drift, 0.0, 1.0),
                'drift_level': drift_level,
                'js_data_source': data_source,
                'lambda_param': self.lambda_param
            }

            if verbose:
                print(f"üìä Trust-ADE Concept Drift Results:")
                print(f"   üéØ Concept-Drift Rate: {results['concept_drift_rate']:.4f} ({drift_level})")
                print(f"   üìà KS Component (Œª={self.lambda_param}): {results['ks_drift']:.4f}")
                print(f"   üìä JS Component (1-Œª={1 - self.lambda_param}): {results['js_divergence']:.4f}")
                print(f"   üß† Explanation Drift: {results['explanation_drift']:.4f}")
                print(f"   üìã JS Data Source: {data_source}")

            return results

        except Exception as e:
            warnings.warn(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ConceptDrift.calculate: {str(e)}")
            return self._default_results()

    def _default_results(self) -> Dict[str, float]:
        """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö"""
        return {
            'concept_drift_rate': 0.5,
            'ks_drift': 0.5,
            'js_divergence': 0.5,
            'explanation_drift': 0.5,
            'drift_level': 'Unknown',
            'js_data_source': 'error',
            'lambda_param': self.lambda_param
        }